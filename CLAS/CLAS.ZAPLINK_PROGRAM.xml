<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="13C7F8ECB0447C678E5FE14F6421AFF1" CODE_SIGNATURE="D11F5CB766D497476CBBBF158FD64E62" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_PROGRAM" TYPE="CLAS" VERSION="1.01">
 <DEPENDENCIES>
  <ITEM TYPE="CLAS" NAME="ZAPLINK_CONNECTOR_"/>
 </DEPENDENCIES>
 <DIRECTORY DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X" MSG_ID="ZAPLINK_PROGRAM">
   <INHERITANCE REFCLSNAME="ZAPLINK_CONNECTOR_" STATE="1"/>
   <TEXTS>
    <ITEM LANG="E" TEXT="Data for Class">U1&amp;FUNCTIONALITY&amp;
ASConnector for :
AS,,- PROG : ABAP Program
U1&amp;RELATIONS&amp;
ASIs part of ZAP Link Framework as Official Connector.
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AShttps://code.google.com/p/zaplink/wiki/Connector
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" EXPOSURE="2" STATE="1" ATTDECLTYP="2" ATTVALUE="&apos;CNX_PROGRAM&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANG="E" TEXT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="CURRENT_PARAM" STATE="1" TYPTYPE="1" TYPE="ZAPLINK_VARI_DATA=&gt;TS_PARAM_DATA"/>
   <ITEM CMPNAME="FLAGS" STATE="1" ATTDECLTYP="2" TYPTYPE="4">
    BEGIN OF flags,       &quot; include RSDBCOM2
      BEGIN OF varid,
        noimp TYPE x VALUE &apos;10&apos;,
        imp TYPE x VALUE &apos;EF&apos;,
        allscreens TYPE x VALUE &apos;20&apos;,
        not_all_screens TYPE x VALUE &apos;20&apos;,
        screens TYPE x VALUE &apos;DF&apos;,
      END OF varid,
      BEGIN OF vari,
        nospagpa TYPE x VALUE &apos;40&apos;,
        spagpa TYPE x VALUE &apos;BF&apos;,
        noint  TYPE x VALUE &apos;80&apos;,
        obli   TYPE x VALUE &apos;01&apos;,
        int TYPE x VALUE &apos;7F&apos;,
        no_obli TYPE x VALUE &apos;FE&apos;,
      END OF vari,
    END OF flags
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Mask values for XFLAG in VARI and VARID"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="REPORT" STATE="1" ATTDECLTYP="1" TYPTYPE="1" TYPE="SY-REPID">
    <TEXTS>
     <ITEM LANG="E" TEXT="Program for form"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="R_DOC_ID" STATE="1" ATTDECLTYP="1" TYPTYPE="1" TYPE="TR_DOCID">
    <TEXTS>
     <ITEM LANG="E" TEXT="Documentation Object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="SUPPORTEDTYPES" EXPOSURE="1" STATE="1" ATTDECLTYP="2" TYPTYPE="4">BEGIN OF supportedtypes,
      program          TYPE td_comptype VALUE &apos;PROG&apos;,       &quot;#EC NOTEXT
      sys_variant      TYPE td_comptype VALUE &apos;VARI&apos;,       &quot;#EC NOTEXT
      appl_variant     TYPE td_comptype VALUE &apos;VARX&apos;,       &quot;#EC NOTEXT
    END OF supportedtypes
`</ITEM>
   <ITEM CMPNAME="_UUID" STATE="1" ATTDECLTYP="2" ATTVALUE="&apos;AAAD0A4B07A5A05AE1000000AC120173&apos;" TYPTYPE="1" TYPE="TD_CONNUUID">
    <TEXTS>
     <ITEM LANG="E" TEXT="UUID for connector Program"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_VER" STATE="1" ATTDECLTYP="2" ATTVALUE="&apos;1.0&apos;" TYPTYPE="1" TYPE="TD_CONNVER">
    <TEXTS>
     <ITEM LANG="E" TEXT="Connector Version"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <FRIENDS>
   <ITEM REFCLSNAME="ZAPLINK_PROG_DATA" STATE="1"/>
   <ITEM REFCLSNAME="ZAPLINK_VARI_DATA" STATE="1"/>
   <ITEM REFCLSNAME="ZAPLINK_VARI_RAW" STATE="1"/>
  </FRIENDS>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE zaplink_macros.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
*table TDCLT
*DOKCLASS DOKTITEL
*CF       Program function                                             Program              Function
*CM       Pull-down menu/menu bar                                      Program              Menu
*RE       Report/Function Group, Logical DB                            Program/module pool
  DATA _id    LIKE LINE OF r_doc_id.
  DATA f_ok   TYPE abap_bool.

  _id-sign = &apos;I&apos;.
  _id-option = &apos;EQ&apos;.
  _id-low = &apos;CF&apos;. APPEND _id TO r_doc_id.
  _id-low = &apos;CM&apos;. APPEND _id TO r_doc_id.
  _id-low = &apos;RE&apos;. APPEND _id TO r_doc_id.

  PERFORM check_vari_form_exists IN PROGRAM (sy-repid) CHANGING f_ok IF FOUND.
  IF NOT f_ok IS INITIAL.   report = sy-repid.    RETURN.   ENDIF.
  PERFORM check_vari_form_exists IN PROGRAM zaplink_vari CHANGING f_ok IF FOUND.
  IF NOT f_ok IS INITIAL.
    report = &apos;ZAPLINK_VARI&apos;.    &quot; Dump if program name is in lower case
  ENDIF.
*      assert ID ZAPLINK CONDITION f_ok is initial.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2">
    <TEXTS>
     <ITEM LANG="E" TEXT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
  DATA type LIKE LINE OF supported_types.

  CALL METHOD super-&gt;constructor.
  mac_create_log application_log ballog_subobject space.    application_log-&gt;msgid = &apos;ZAPLINK_PROGRAM&apos;.
  type-type = supportedtypes-program. INSERT type INTO TABLE supported_types.
  type-type = supportedtypes-sys_variant. INSERT type INTO TABLE supported_types.
  type-type = supportedtypes-appl_variant. INSERT type INTO TABLE supported_types.

  uuid = _uuid.
  version = _ver.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_PARAM_VALUE" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Return Param value from subroutine pool"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="VALUE" CMPTYPE="1" TYPTYPE="1" TYPE="STRING"/>
    </PARAMETERS>
    <SOURCE>`
  current_param-value = value.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_PROGRAM_SIGNATURE" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Get Source code Signature of a program"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PROGRAM_NAME" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Program Name"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="ZAPLINK_DATATYPES~TD_CHECKSUM">
      <TEXTS>
       <ITEM LANG="E" TEXT="MD5 Hash"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA t_code TYPE tt_abaprawsource.
  DATA d_src  TYPE string.

  t_code = get_prog_rawsource( program_name ).
  zaplink_tools=&gt;pretty_printer( CHANGING table = t_code ).
  zaplink_tools=&gt;condense_abap_source( CHANGING table = t_code ).
  d_src = zaplink_tools=&gt;table_2_string( t_code ).
  d_src = zaplink_tools=&gt;clean_abap_string( d_src ).
  result = zaplink_tools=&gt;calculate_md5_hash( d_src ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_SELECTOPTION_VALUE" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Return Select options value form subroutine pool"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="VALUE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY TABLE"/>
    </PARAMETERS>
    <SOURCE>`
  DATA my_value LIKE LINE OF current_param-values.
*  DATA _desc    TYPE REF TO cl_abap_structdescr.
  FIELD-SYMBOLS:
*    &lt;c&gt; LIKE LINE OF _desc-&gt;components,
*    &lt;sf&gt; TYPE ANY,
*    &lt;tf&gt; TYPE ANY,
    &lt;v&gt; TYPE ANY.

  CHECK NOT value[] IS INITIAL.
*  LOOP AT value ASSIGNING &lt;v&gt;.   EXIT.   ENDLOOP.
*  _desc ?= cl_abap_structdescr=&gt;describe_by_data( p_data = &lt;v&gt; ).
  LOOP AT value ASSIGNING &lt;v&gt;.
    CLEAR my_value.
    MOVE-CORRESPONDING &lt;v&gt; to my_value.
*    LOOP AT _desc-&gt;components ASSIGNING &lt;c&gt;.
*      UNASSIGN: &lt;sf&gt;, &lt;tf&gt;.
*      ASSIGN COMPONENT &lt;c&gt;-name OF STRUCTURE &lt;v&gt; TO &lt;sf&gt;.
*      ASSIGN COMPONENT &lt;c&gt;-name OF STRUCTURE my_value TO &lt;tf&gt;.
*      &lt;tf&gt; = &lt;sf&gt;.
*    ENDLOOP.
    APPEND my_value TO current_param-values.
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_VARIANT_PARAMS" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Get Variant parameters"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PROGRAM" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME"/>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TT_VARIANT_DATA"/>
     <ITEM SCONAME="VARIANT" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_VARIANT">
      <TEXTS>
       <ITEM LANG="E" TEXT="ABAP: Name of variant (without program name)"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA p_key     TYPE rsvarkey.
  DATA t_screens TYPE STANDARD TABLE OF rsscr.
  DATA t_vari    TYPE STANDARD TABLE OF rvari.
  DATA p_subrc   TYPE sy-subrc.
  DATA p_subrc_s TYPE sy-subrc.
  DATA s_subrc   TYPE string.
  DATA s_subrc_s TYPE string.
  DATA d_param   LIKE LINE OF current_param-params.
  DATA d_mandt   TYPE sy-mandt.
  TYPES tt_vdat TYPE STANDARD TABLE OF rsvarivdat.
  TYPES tt_vdyn TYPE STANDARD TABLE OF rsvaridyn.
  TYPES tt_vdd  TYPE STANDARD TABLE OF rsvdatdyn.
  FIELD-SYMBOLS:
    &lt;vdat&gt; TYPE tt_vdat,
    &lt;vdyn&gt; TYPE tt_vdyn,
    &lt;vdd&gt;  TYPE tt_vdd,
    &lt;dat&gt;  LIKE LINE OF &lt;vdat&gt;,
    &lt;s&gt; LIKE LINE OF t_screens,
    &lt;v&gt; LIKE LINE OF t_vari.
  DATA: BEGIN OF l_formname_0,
          prefix(7) VALUE &apos;%_LINK_&apos;,
          suffix(8),
        END OF l_formname_0.

  DATA d_formname TYPE string.

  p_key-report = program.
  p_key-variant = variant.
  PERFORM import_var_selc IN PROGRAM saplsvar TABLES t_screens t_vari
                                               USING p_key-report p_key
                                            CHANGING p_subrc p_subrc_s.
  IF NOT p_subrc_s IS INITIAL.
    IF 1 = 2.   MESSAGE i000 WITH space space space.  ENDIF.
    s_subrc = p_subrc_s.
    CALL METHOD application_log-&gt;add_error
      EXPORTING
*        id_msgid     =
        id_msgno     = &apos;000&apos;
*        id_msgv4     =
        id_msgv1     = s_subrc
        id_msgv2     = p_key-report
        id_msgv3     = p_key-variant.
    RETURN.
  ELSEIF NOT p_subrc IS INITIAL.
    IF 1 = 2.   MESSAGE i001 WITH space space space.  ENDIF.
    s_subrc = p_subrc.
    CALL METHOD application_log-&gt;add_error
      EXPORTING
*        id_msgid     =
        id_msgno     = &apos;001&apos;
*        id_msgv4     =
        id_msgv1     = s_subrc
        id_msgv2     = p_key-report
        id_msgv3     = p_key-variant.
    RETURN.
  ENDIF.

* IN import_var_selc
*VARIVDAT LIKE RSVARIVDAT OCCURS 2
*DATA: VARIDYN LIKE RSVARIDYN OCCURS 10 WITH HEADER LINE.
*DATA: GL_VDATDYN LIKE RSVDATDYN OCCURS 0.
*  PERFORM import_variant_static(rsdbspvd) USING    p_selctab[]
*                                                   l_vari[]
*                                                   varivdat[]
*                                                   varidyn[]
*                                                   varivdat_dyn[]
*                                                   p_key
*                                                   p_imp_subrc.
  ASSIGN (&apos;(SAPLSVAR)varivdat[]&apos;) TO &lt;vdat&gt;.
  ASSIGN (&apos;(SAPLSVAR)varidyn[]&apos;) TO &lt;vdyn&gt;.
  ASSIGN (&apos;(SAPLSVAR)varivdat_dyn[]&apos;) TO &lt;vdd&gt;.

  IF variant CP zaplink_vari_data=&gt;variant_prefix-system OR variant CP zaplink_vari_data=&gt;variant_prefix-customer.    d_mandt = &apos;000&apos;.    ELSE.   d_mandt = sy-mandt.    ENDIF.
  PERFORM %_import_vari_clnt IN PROGRAM (p_key-report)
                             USING p_key p_subrc_s d_mandt
                             CHANGING p_subrc
                             IF FOUND.
  IF NOT p_subrc IS INITIAL OR NOT p_subrc_s IS INITIAL.
    IF 1 = 2.   MESSAGE i002 WITH space space space space.  ENDIF.
    s_subrc = p_subrc.
    s_subrc_s = p_subrc_s.
    CALL METHOD application_log-&gt;add_error
      EXPORTING
*        id_msgid     =
        id_msgno     = &apos;002&apos;
        id_msgv1     = s_subrc_s
        id_msgv2     = s_subrc
        id_msgv3     = p_key-report
        id_msgv4     = p_key-variant.
    RETURN.
  ENDIF.

*  PERFORM set_object IN PROGRAM report USING me IF FOUND.
*  IF 1 = 2.   PERFORM set_object IN PROGRAM zaplink_vari USING me IF FOUND.  ENDIF.
  PERFORM set_object IN PROGRAM zaplink_vari USING me IF FOUND.
*perform brepi(rsdbspva) in MF : RS_VARIANT_CONTENTS
  LOOP AT t_vari ASSIGNING &lt;v&gt;.
    CLEAR current_param.
    MOVE-CORRESPONDING &lt;v&gt; TO current_param.
* FROM FORM FILL_TABLES_PS IN PROGRAM saplsvar:
*    PERFORM FILL_TABLES_PS IN PROGRAM saplsvar  tables current_param-hdr
*                                                 using &lt;v&gt;.
    IF &lt;v&gt;-xflag1 O flags-varid-noimp.      current_param-no_import = abap_true.    ENDIF.
    IF &lt;v&gt;-xflag1 O flags-vari-obli.        current_param-obli = abap_true.         ENDIF.
    IF &lt;v&gt;-xflag1 O flags-vari-noint.       current_param-noint = abap_true.        ENDIF.
    IF &lt;v&gt;-xflag1 Z flags-vari-nospagpa.
      READ TABLE t_screens ASSIGNING &lt;s&gt; WITH KEY name = &lt;v&gt;-name.
      IF sy-subrc = 0 AND &lt;s&gt;-spagpa NE space.    current_param-spagpa = abap_true.   ENDIF.
    ENDIF.
*    IF current_param-name NE space.
*      PERFORM init_text_field TABLES selctab
*                        USING current_param-name
*                        current_param-text &apos;S&apos; rsvar-report.
*    ENDIF.
* end FORM FILL_TABLES_PS IN PROGRAM saplsvar
    MOVE &lt;v&gt;-name TO l_formname_0-suffix.
    CONCATENATE &apos;GET_VAL_&apos; &lt;v&gt;-kind INTO d_formname.
    IF 1 = 2.                                               &quot;#EC *
*      PERFORM get_val_s IN PROGRAM zaplink_vari IF FOUND.   &quot;#EC *
      PERFORM get_val_p IN PROGRAM zaplink_vari USING space space space IF FOUND. &quot;#EC *
    ENDIF.
*    PERFORM (l_formname_0) IN PROGRAM (p_key-report)
*           USING report d_formname p_subrc IF FOUND.
    PERFORM (l_formname_0) IN PROGRAM (p_key-report)
           USING &apos;ZAPLINK_VARI&apos; d_formname p_subrc IF FOUND.
    LOOP AT &lt;vdat&gt; ASSIGNING &lt;dat&gt;
         WHERE selname = &lt;v&gt;-name.
      MOVE-CORRESPONDING &lt;dat&gt; TO d_param.
      APPEND d_param TO current_param-params.
    ENDLOOP.
    IF current_param-no_import = abap_true.   CLEAR: current_param-value, current_param-values, current_param-params.    ENDIF.
    INSERT current_param INTO TABLE result.
  ENDLOOP.
*  PERFORM clear_object IN PROGRAM report USING me IF FOUND.
*  IF 1 = 2.   PERFORM clear_object IN PROGRAM zaplink_vari USING me IF FOUND. ENDIF.
  PERFORM clear_object IN PROGRAM zaplink_vari USING me.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="READ_VARIANTS" EXPOSURE="1" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Read variant from SAP"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TT_VARIANTS"/>
     <ITEM SCONAME="VARIANTS" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TT_VARIANT_LIST"/>
    </PARAMETERS>
    <SOURCE>`
*  DATA t_varis     TYPE STANDARD TABLE OF varis WITH DEFAULT KEY.
  DATA t_dynnr     TYPE STANDARD TABLE OF rsdynnr WITH DEFAULT KEY.
  DATA t_varis     TYPE STANDARD TABLE OF rsdynnr WITH DEFAULT KEY.
  DATA t_varit     TYPE STANDARD TABLE OF varit WITH DEFAULT KEY.
  DATA s_vari      LIKE LINE OF result.
  DATA s_varis     LIKE LINE OF t_varis.
  FIELD-SYMBOLS:
    &lt;v&gt; LIKE LINE OF variants,
    &lt;t&gt; LIKE LINE OF t_varit,
    &lt;s&gt; LIKE LINE OF t_varis.

*  SELECT * INTO TABLE t_varis
*    FROM varis CLIENT SPECIFIED
*    FOR ALL ENTRIES IN variants
*    WHERE mandt = variants-mandt
*      AND report = variants-report
*      AND variant = variants-variant.

  SELECT * INTO TABLE t_varit
    FROM varit CLIENT SPECIFIED
    FOR ALL ENTRIES IN variants
    WHERE mandt = variants-mandt
      AND report = variants-report
      AND variant = variants-variant.

  LOOP AT variants ASSIGNING &lt;v&gt;.
    CLEAR s_vari.   s_vari-header = &lt;v&gt;.
    LOOP AT t_varit ASSIGNING &lt;t&gt;
         WHERE mandt = &lt;v&gt;-mandt
          AND report = &lt;v&gt;-report
         AND variant = &lt;v&gt;-variant.
      INSERT &lt;t&gt; INTO TABLE s_vari-texts.
    ENDLOOP.
    CALL FUNCTION &apos;RS_GET_SCREENS_4_1_VARIANT&apos;
      EXPORTING
        program                    = &lt;v&gt;-report
        variant                    = &lt;v&gt;-variant
*     IMPORTING
*       FLAG_1000                  =
*       FLAG_ALL_SCREENS           =
      TABLES
        dynnr                      = t_dynnr
        variscreens                = t_varis
      EXCEPTIONS
        no_screens                 = 1
        variant_not_existent       = 2
        OTHERS                     = 3.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;RS_GET_SCREENS_4_1_VARIANT&apos; sy-subrc.
    ENDIF.
    DELETE t_varis WHERE dynnr = &apos;*&apos;.   &quot; only one screen
    MODIFY t_varis FROM s_varis TRANSPORTING kind WHERE NOT kind IS INITIAL.    &quot; not used on import
    s_vari-screens = t_varis.
*    LOOP AT t_varis ASSIGNING &lt;s&gt;
*         WHERE mandt = &lt;v&gt;-mandt
*          AND report = &lt;v&gt;-report
*         AND variant = &lt;v&gt;-variant.
*      INSERT &lt;s&gt; INTO TABLE s_vari-screens.
*    ENDLOOP.
    s_vari-params = get_variant_params( program = &lt;v&gt;-report   variant = &lt;v&gt;-variant ).
    INSERT s_vari INTO TABLE result.
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_PARAM_VALUE" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Return Param value from subroutine pool"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="VALUE" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="STRING"/>
    </PARAMETERS>
    <SOURCE>`
  value = current_param-value.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_SELECTOPTION_VALUE" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Return Select options value form subroutine pool"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="VALUE" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TR_SO_VALUE"/>
    </PARAMETERS>
    <SOURCE>`
  value = current_param-values.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_VARIANT_PARAMS" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Get Variant parameters"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" TYPTYPE="1" TYPE="TT_VARIANT_DATA">
      <TEXTS>
       <ITEM LANG="E" TEXT="Variant data"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="PROGRAM" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Program name"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="ABAP_BOOL">
      <TEXTS>
       <ITEM LANG="E" TEXT="Everything was OK"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="VARIANT" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_VARIANT">
      <TEXTS>
       <ITEM LANG="E" TEXT="ABAP: Name of variant (without program name)"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  TYPES tt_vdat TYPE STANDARD TABLE OF rsvarivdat.
  TYPES tt_vdyn TYPE STANDARD TABLE OF rsvaridyn.
  TYPES tt_vdd  TYPE STANDARD TABLE OF rsvdatdyn.
  DATA p_key     TYPE rsvarkey.
  DATA t_screens TYPE STANDARD TABLE OF rsscr.
  DATA t_vari    TYPE STANDARD TABLE OF rvari.
  DATA p_subrc   TYPE sy-subrc.
  DATA p_subrc_s TYPE sy-subrc.
  DATA d_param   LIKE LINE OF current_param-params.
  DATA t_dyns_fields TYPE STANDARD TABLE OF rsdsfields WITH DEFAULT KEY.
  DATA t_varivdat TYPE tt_vdat.
  DATA t_varidyn TYPE tt_vdyn.
  DATA t_vdatdyn TYPE tt_vdd.
  DATA t_texpr   TYPE rsds_texpr.
  DATA s_vdat    LIKE LINE OF t_varivdat.
  DATA: BEGIN OF imex,
          vari,
          dyns,
        END   OF imex.
  FIELD-SYMBOLS:
    &lt;s&gt; LIKE LINE OF t_vari,
    &lt;p&gt; LIKE LINE OF current_param-params,
    &lt;v&gt; LIKE LINE OF data.
  DATA: BEGIN OF l_formname_0,
          prefix(7) VALUE &apos;%_LINK_&apos;,
          suffix(8),
        END OF l_formname_0.

  DATA d_formname TYPE string.

  p_key-report = program.
  p_key-variant = variant.
  result = abap_true.

* CALL FUNCTION &apos;SELTAB_2_SELOPTS&apos;

  PERFORM import_var_selc IN PROGRAM saplsvar TABLES t_screens t_vari
                                               USING p_key-report p_key
                                            CHANGING p_subrc p_subrc_s.

  PERFORM set_object IN PROGRAM (report) USING me IF FOUND.   &quot; for installer
  IF 1 = 2.   PERFORM set_object IN PROGRAM zaplink_vari USING me IF FOUND.  ENDIF.
*  SORT t_screens BY name.
*perform brepi(rsdbspva) in MF : RS_VARIANT_CONTENTS
  LOOP AT data INTO current_param.
    READ TABLE t_vari ASSIGNING &lt;s&gt; WITH KEY name = current_param-name.    &quot; BINARY SEARCH.
    CHECK sy-subrc = 0.   &quot; Else ignore field value
    &lt;s&gt;-vtype = current_param-vtype.    &lt;s&gt;-vname = current_param-vname.
    &lt;s&gt;-appendage = current_param-appendage.    &lt;s&gt;-invisible = current_param-invisible.    &lt;s&gt;-protected = current_param-protected.
* FROM MF RS_CHANGE_CREATED_VARIANT (134)
    IF current_param-spagpa = abap_true.    &lt;s&gt;-xflag1 = &lt;s&gt;-xflag1 BIT-AND flags-vari-spagpa.    ELSE.   &lt;s&gt;-xflag1 = &lt;s&gt;-xflag1 BIT-OR flags-vari-nospagpa.   ENDIF.
*    IF &lt;v&gt;-xflag1 O flags-vari-obli.        current_param-obli = abap_true.         ENDIF.
    IF current_param-obli = abap_true.      &lt;s&gt;-xflag1 = &lt;s&gt;-xflag1 BIT-OR flags-vari-obli.       ELSE.   &lt;s&gt;-xflag1 = &lt;s&gt;-xflag1 BIT-AND flags-vari-no_obli.   ENDIF.
*    IF &lt;v&gt;-xflag1 O flags-varid-noimp.      current_param-no_import = abap_true.    ENDIF.
    IF current_param-no_import = abap_true. &lt;s&gt;-xflag1 = &lt;s&gt;-xflag1 BIT-OR flags-varid-noimp.     ELSE.   &lt;s&gt;-xflag1 = &lt;s&gt;-xflag1 BIT-AND flags-varid-imp.      ENDIF.
*    IF &lt;v&gt;-xflag1 O flags-vari-noint.       current_param-noint = abap_true.        ENDIF.
    IF current_param-noint = abap_true.     &lt;s&gt;-xflag1 = &lt;s&gt;-xflag1 BIT-OR flags-vari-noint.      ELSE.   &lt;s&gt;-xflag1 = &lt;s&gt;-xflag1 BIT-AND flags-vari-int.       ENDIF.
* END FROM MF RS_CHANGE_CREATED_VARIANT (134)
    MOVE &lt;s&gt;-name TO l_formname_0-suffix.
    CONCATENATE &apos;SET_VAL_&apos; &lt;s&gt;-kind INTO d_formname.
    IF 1 = 2.                                               &quot;#EC *
*      PERFORM set_val_s IN PROGRAM zaplink_vari TABLES space                     &quot;#EC *
*                USING space space space space space IF FOUND.   &quot;#EC *
      PERFORM set_val_p IN PROGRAM zaplink_vari USING space space space IF FOUND. &quot;#EC *
    ENDIF.
    PERFORM (l_formname_0) IN PROGRAM (p_key-report)
           USING report d_formname p_subrc IF FOUND.
    IF p_subrc &lt;&gt; 0.    result = abap_false.    ENDIF.
    LOOP AT current_param-params ASSIGNING &lt;p&gt;.
      CLEAR s_vdat.   MOVE-CORRESPONDING &lt;p&gt; TO s_vdat.   s_vdat-selname = current_param-name.
      APPEND s_vdat TO t_varivdat.
    ENDLOOP.
  ENDLOOP.
  PERFORM clear_object IN PROGRAM (report) USING me IF FOUND.   &quot; for installer
  IF 1 = 2.   PERFORM clear_object IN PROGRAM zaplink_vari USING me IF FOUND.   ENDIF.

* MF RS_CREATE_VARIANT
  PERFORM export_variant_static IN PROGRAM rsdbspvd TABLES   t_dyns_fields
                                                     USING   t_vari
                                                             t_varivdat
                                                             t_varidyn
                                                             t_vdatdyn
                                                             t_texpr imex
                                                             p_key
                                                             p_subrc.
  IF p_subrc &lt;&gt; 0.    result = abap_false.    ENDIF.

  PERFORM export_%_vari IN PROGRAM saplsvar USING p_key-report
                                                  p_key
                                                  sy-mandt
                                                  space.    &quot; FLAG_NOIMPORT.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="WRITE_VARIANTS" EXPOSURE="1" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Read variant from SAP"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TT_VARIANTS"/>
     <ITEM SCONAME="VARIANTS" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TT_VARIANTS"/>
    </PARAMETERS>
    <SOURCE>`
  DATA t_varis     TYPE STANDARD TABLE OF rsdynnr WITH DEFAULT KEY.
  DATA t_varit     TYPE STANDARD TABLE OF varit WITH DEFAULT KEY.
  DATA t_params    TYPE STANDARD TABLE OF rsparams WITH DEFAULT KEY.
  DATA s_param     LIKE LINE OF t_params.
  DATA d_subrc     TYPE sy-subrc.
*  DATA t_rep       TYPE STANDARD TABLE OF string.
  DATA d_is_work_i  TYPE abap_bool.
  DATA d_is_inactiv TYPE abap_bool.
  DATA d_obj_name   TYPE e071-obj_name.
  DATA t_variants   TYPE tt_variants.
  DATA f_ok         TYPE abap_bool.
  DATA o_activate   TYPE REF TO zaplink_activate.
  DATA t_comps      TYPE zaplink_list=&gt;tt_compkeys.
  DATA s_comp       LIKE LINE OF t_comps.
*  DATA s_vari      LIKE LINE OF result.
  FIELD-SYMBOLS:
*    &lt;t&gt; LIKE LINE OF t_varit,
*    &lt;s&gt; LIKE LINE OF t_varis,
    &lt;v&gt; LIKE LINE OF variants,
    &lt;p&gt; LIKE LINE OF &lt;v&gt;-params,
    &lt;val&gt; LIKE LINE OF &lt;p&gt;-values.

  t_variants = variants.    SORT t_variants.    s_comp-type = &apos;PROG&apos;.
  LOOP AT t_variants ASSIGNING &lt;v&gt;.
    AT NEW header-report.
      f_ok = abap_true.
*    READ REPORT &lt;v&gt;-header-report INTO t_rep STATE &apos;A&apos;.   &quot; Check for active program existence
      d_obj_name = &lt;v&gt;-header-report.
      CALL FUNCTION &apos;RS_OBJECT_IN_WORKING_AREA&apos;
        EXPORTING
          object                        = &apos;REPS&apos;
          obj_name                      = d_obj_name
*     GLOBAL_CHECK                  = &apos; &apos;
*     MODE                          = &apos;S&apos;
        IMPORTING
          object_is_work_item           = d_is_work_i     &quot; My inactive object
          object_inactive_version       = d_is_inactiv.
      IF NOT d_is_work_i IS INITIAL OR NOT d_is_inactiv IS INITIAL.
        REFRESH t_comps.    s_comp-name = &lt;v&gt;-header-report.    APPEND s_comp TO t_comps.
        CREATE OBJECT o_activate.
        o_activate-&gt;add_keys( t_comps ).
        t_comps = o_activate-&gt;activate( ).
        IF NOT t_comps IS INITIAL.      CLEAR f_ok.     ENDIF.
      ENDIF.
    ENDAT.

    IF f_ok IS INITIAL.
* Can&apos;t insert variant &apos;&amp;1&apos; for program &apos;&amp;2&apos;, because do not exist as active
      SET EXTENDED CHECK OFF.
      IF 1 = 2.   MESSAGE i003 WITH &lt;v&gt;-header-report &lt;v&gt;-header-variant.   ENDIF.
      SET EXTENDED CHECK ON.
      CALL METHOD application_log-&gt;add_error
        EXPORTING
*        id_msgid     =
          id_msgno     = &apos;003&apos;
*        id_msgv4     =
          id_msgv1     = &lt;v&gt;-header-report
          id_msgv2     = &lt;v&gt;-header-variant.
    ENDIF.
    CHECK f_ok = abap_true.

    REFRESH t_params.
    LOOP AT &lt;v&gt;-params ASSIGNING &lt;p&gt;.
      IF NOT &lt;p&gt;-value IS INITIAL.
        CLEAR s_param.    s_param-kind = &apos;P&apos;.       s_param-selname = &lt;p&gt;-name.     s_param-low = &lt;p&gt;-value.                  APPEND s_param TO t_params.
      ELSEIF NOT &lt;p&gt;-values IS INITIAL.
        LOOP AT &lt;p&gt;-values ASSIGNING &lt;val&gt;.
          CLEAR s_param.    s_param-kind = &apos;S&apos;.     s_param-selname = &lt;p&gt;-name.     MOVE-CORRESPONDING &lt;val&gt; TO s_param.      APPEND s_param TO t_params.
        ENDLOOP.
      ENDIF.
    ENDLOOP.
    t_varit = &lt;v&gt;-texts.
    t_varis = &lt;v&gt;-screens.
    CALL FUNCTION &apos;RS_VARIANT_EXISTS&apos;
      EXPORTING
        report              = &lt;v&gt;-header-report
        variant             = &lt;v&gt;-header-variant
      IMPORTING
        r_c                 = d_subrc
      EXCEPTIONS
        not_authorized      = 1
        no_report           = 2
        report_not_existent = 3
        report_not_supplied = 4
        OTHERS              = 5.
    IF sy-subrc = 0 AND d_subrc = 0.
      CALL FUNCTION &apos;RS_VARIANT_DELETE&apos;
        EXPORTING
          report                     = &lt;v&gt;-header-report
          variant                    = &lt;v&gt;-header-variant
          flag_confirmscreen         = abap_true
          flag_delallclient          = abap_true    &quot; other wise popup screen
*       IMPORTING
*         VARIANT                    =
        EXCEPTIONS
          not_authorized             = 1
          not_executed               = 2
          no_report                  = 3
          report_not_existent        = 4
          report_not_supplied        = 5
          variant_locked             = 6
          variant_not_existent       = 7
          no_corr_insert             = 8
          variant_protected          = 9
          OTHERS                     = 10.
      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDIF.

    CALL FUNCTION &apos;RS_CREATE_VARIANT&apos;
      EXPORTING
        curr_report               = &lt;v&gt;-header-report
        curr_variant              = &lt;v&gt;-header-variant
        vari_desc                 = &lt;v&gt;-header
      TABLES
        vari_contents             = t_params
        vari_text                 = t_varit
        vscreens                  = t_varis
      EXCEPTIONS
        illegal_report_or_variant = 1
        illegal_variantname       = 2
        not_authorized            = 3
        not_executed              = 4
        report_not_existent       = 5
        report_not_supplied       = 6
        variant_exists            = 7
        variant_locked            = 8
        OTHERS                    = 9.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.
*    PERFORM enq_variant IN PROGRAM saplsvar USING &lt;v&gt;-header-report &lt;v&gt;-header-variant.      &quot; Not release by function it seems
      IF set_variant_params( program = &lt;v&gt;-header-report   variant = &lt;v&gt;-header-variant    data = &lt;v&gt;-params ) = abap_true.
        APPEND &lt;v&gt; TO result.
      ENDIF.
      PERFORM deq_variant IN PROGRAM saplsvar USING &lt;v&gt;-header-report &lt;v&gt;-header-variant.
    ENDIF.
  ENDLOOP.</SOURCE>
   </ITEM>
  </METHODS>
  <REDEFINITIONS>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~ANONYMIZE">
    <SOURCE>`
  DATA o_prog     TYPE to_program.
  DATA o_variant  TYPE to_variant.

  CHECK object IS BOUND.

  CASE object-&gt;type.
    WHEN supportedtypes-sys_variant OR supportedtypes-appl_variant.
      o_variant ?= object-&gt;raw.
      o_variant-&gt;anonymize( ).
    WHEN supportedtypes-program.
      o_prog ?= object-&gt;raw.
      o_prog-&gt;anonymize( ).
    WHEN OTHERS.
      mac_raise_type_not_supported me-&gt;class_name object-&gt;type.
  ENDCASE.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~anonymize( object ).
    CATCH ZCX_ZL_CONNECTOR INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~UNANONYMIZE">
    <SOURCE>`
  DATA o_prog     TYPE to_program.
  DATA o_variant  TYPE to_variant.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~unanonymize( object ).
    CATCH ZCX_ZL_CONNECTOR INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.

  CHECK object IS BOUND.

  CASE object-&gt;type.
    WHEN supportedtypes-sys_variant OR supportedtypes-appl_variant.
      o_variant ?= object-&gt;raw.
      o_variant-&gt;unanonymize( ).
    WHEN supportedtypes-program.
      o_prog ?= object-&gt;raw.
      o_prog-&gt;unanonymize( ).
    WHEN OTHERS.
      mac_raise_type_not_supported me-&gt;class_name object-&gt;type.
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CODE_SIGNATURE~GET_SIGNATURE">
    <SOURCE>`
  DATA d_type TYPE td_comptype.
  DATA d_prog TYPE td_progname.

  TRY.
    d_type = component-&gt;get_type( ).
    CASE d_type.
      WHEN supportedtypes-program.
        d_prog = component-&gt;get_name( ).
        result = get_program_signature( d_prog ).
      WHEN OTHERS.
        mac_raise_type_not_supported me-&gt;class_name d_type.
    ENDCASE.

    mac_def_catch ZCX_ZL_CONNECTOR.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~CREATE_NEW_RAW">
    <SOURCE>`
  DATA o_prog     TYPE to_program.
  DATA o_variant  TYPE to_variant.
  DATA o_raw_var  TYPE to_raw_variant.

  CASE type.
    WHEN supportedtypes-sys_variant OR supportedtypes-appl_variant.
      CREATE OBJECT o_raw_var.
      object = o_raw_var.
      CREATE OBJECT o_variant.
      object-&gt;raw = o_variant.
    WHEN supportedtypes-program.
      CREATE OBJECT object.
      CREATE OBJECT o_prog.
      object-&gt;raw = o_prog.
    WHEN OTHERS.
      CLEAR object.
      mac_raise_type_not_supported me-&gt;class_name type.
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~DELETE_FROM_SAP">
    <SOURCE>`
  DATA d_name     TYPE td_compname.
  DATA type       TYPE td_comptype.
  DATA program    TYPE sy-repid.
  DATA s_variant  TYPE ts_variant_key.

  TRY.
    type = component-&gt;get_type( ).
    d_name = component-&gt;get_name( ).
    CASE type.
      WHEN supportedtypes-sys_variant OR supportedtypes-appl_variant.
        CHECK do_exists( component ) = exists-exists.     &quot; UI when variant do not exists (detected with Issue 104)
        s_variant = zaplink_vari_data=&gt;name_2_key( d_name ).
        CALL FUNCTION &apos;RS_VARIANT_DELETE&apos;
          EXPORTING
            report                     = s_variant-program
            variant                    = s_variant-variant
*           FLAG_CONFIRMSCREEN         =
            flag_delallclient          = abap_true
*         IMPORTING
*           VARIANT                    =
          EXCEPTIONS
            not_authorized             = 1
            not_executed               = 2
            no_report                  = 3
            report_not_existent        = 4
            report_not_supplied        = 5
            variant_locked             = 6
            variant_not_existent       = 7
            no_corr_insert             = 8
            variant_protected          = 9
            OTHERS                     = 10.
        IF sy-subrc &lt;&gt; 0.
          mac_add_mf_and_raise &apos;RS_VARIANT_DELETE&apos; sy-subrc.
        ENDIF.
      WHEN supportedtypes-program.
        program = d_name.
        CALL FUNCTION &apos;RS_DELETE_PROGRAM&apos;
          EXPORTING
*          CORRNUMBER                       =
            program                          = program
*          SUPPRESS_CHECKS                  = &apos; &apos;
*          SUPPRESS_COMMIT                  = &apos; &apos;
            suppress_popup                   = &apos;X&apos;
*          MASS_DELETE_CALL                 = &apos; &apos;
*          WITH_CUA                         = &apos;X&apos;
*          WITH_DOCUMENTATION               = &apos;X&apos;
*          WITH_DYNPRO                      = &apos;X&apos;
*          WITH_INCLUDES                    = &apos; &apos;
*          WITH_TEXTPOOL                    = &apos;X&apos;
*          WITH_VARIANTS                    = &apos;X&apos;
*          TADIR_DEVCLASS                   =
*          SKIP_PROGRESS_IND                = &apos; &apos;
*          FORCE_DELETE_USED_INCLUDES       = &apos; &apos;
*        IMPORTING
*          CORRNUMBER                       =
*          PROGRAM                          =
          EXCEPTIONS
            enqueue_lock                     = 1
            object_not_found                 = 2
            permission_failure               = 3
            reject_deletion                  = 4
            OTHERS                           = 5.
        IF sy-subrc &lt;&gt; 0.
          mac_add_mf_and_raise &apos;RS_DELETE_PROGRAM&apos; sy-subrc.
        ENDIF.
      WHEN OTHERS.
        mac_raise_type_not_supported me-&gt;class_name type.
    ENDCASE.

    mac_def_catch ZCX_ZL_CONNECTOR.
  ENDTRY.
  result = abap_true.
* Issue 137 =&gt; Remove from Working Area
  zaplink_tools=&gt;remove_comp_from_working_area( type = type
                                                name = d_name ).</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~DO_EXISTS">
    <SOURCE>`
  DATA d_name     TYPE td_compname.
  DATA type       TYPE td_comptype.
  DATA d_subrc    TYPE sy-subrc.
  DATA s_variant  TYPE ts_variant_key.

  exists = me-&gt;exists-not_exists.

  TRY.
    type = component-&gt;get_type( ).
    d_name = component-&gt;get_name( ).
    CASE type.
      WHEN supportedtypes-sys_variant OR supportedtypes-appl_variant.
        s_variant = zaplink_vari_data=&gt;name_2_key( d_name ).
        CALL FUNCTION &apos;RS_VARIANT_EXISTS&apos;
          EXPORTING
            report              = s_variant-program
            variant             = s_variant-variant
          IMPORTING
            r_c                 = d_subrc
          EXCEPTIONS
            not_authorized      = 1
            no_report           = 2
            report_not_existent = 3
            report_not_supplied = 4
            OTHERS              = 5.
        IF sy-subrc = 0 AND d_subrc = 0.    exists = me-&gt;exists-exists.   ENDIF.
      WHEN supportedtypes-program.
        SELECT SINGLE name INTO d_name
          FROM trdir
          WHERE name = d_name.
        IF sy-subrc = 0.    exists = me-&gt;exists-exists.   ENDIF.
      WHEN OTHERS.
        mac_raise_type_not_supported me-&gt;class_name type.
    ENDCASE.

    mac_def_catch ZCX_ZL_CONNECTOR.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~GET_VALUES">
    <SOURCE>`
  DATA s_variant   TYPE ts_variant_key.                     &quot; Issue 53
  CASE type.
    WHEN supportedtypes-sys_variant OR supportedtypes-appl_variant.
      s_variant = zaplink_vari_data=&gt;name_2_key( name ).
      IF s_variant-program IS INITIAL.
        CALL METHOD super-&gt;zaplink_connector~get_values
          EXPORTING
            type = supportedtypes-program
          CHANGING
            name = name.
        s_variant-program = name.
      ENDIF.
      CHECK NOT s_variant-program IS INITIAL.
      CALL FUNCTION &apos;RS_VARIANT_CATALOG&apos;
        EXPORTING
          report                     = s_variant-program
*         NEW_TITLE                  = &apos; &apos;
*         DYNNR                      =
*         INTERNAL_CALL              = &apos; &apos;
*         MASKED                     = &apos;X&apos;
          variant                    = s_variant-variant
*         POP_UP                     = &apos; &apos;
        IMPORTING
          sel_variant                = s_variant-variant
*         SEL_VARIANT_TEXT           =
*       TABLES
*         BELONGING_DYNNR            =
        EXCEPTIONS
          no_report                  = 1
          report_not_existent        = 2
          report_not_supplied        = 3
          no_variants                = 4
          no_variant_selected        = 0
          variant_not_existent       = 6
          OTHERS                     = 7.
      IF sy-subrc &lt;&gt; 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ELSE.
        name = zaplink_vari_data=&gt;key_2_name( s_variant ).
      ENDIF.
    WHEN supportedtypes-program.
      CALL METHOD super-&gt;zaplink_connector~get_values
        EXPORTING
          type = type
        CHANGING
          name = name.
    WHEN OTHERS.
      mac_raise_type_not_supported me-&gt;class_name type.
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~IS_SUPPORTED_VERSION">
    <SOURCE>`
  result = abap_false.    if version = _ver.    result = abap_true.   endif.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~READ_FROM_SAP">
    <SOURCE>`
  TYPES:                                                    &quot; Issue 7
    BEGIN OF ts_doc,
      prog TYPE programm,
      wildcard(1) TYPE c,
    END OF ts_doc.
  DATA s_obj       TYPE ts_doc.                             &quot; Issue 7
  DATA o_prog      TYPE to_program.
  DATA s_fmd_prog  TYPE ts_fm_data.
  DATA o_variant   TYPE to_variant.
  DATA s_fmd_vari  TYPE ts_fmd_vari.
  DATA _prog       TYPE td_progname.
  DATA d_name      TYPE td_compname.
  DATA _obj        TYPE doku_obj.
  DATA type        TYPE td_comptype.
  DATA t_varid     TYPE tt_variant_list.                    &quot; Issue 53
  DATA s_variant   TYPE ts_variant_key.                     &quot; Issue 53
*  DATA s_vari      LIKE LINE OF s_fmd_prog-variants.        &quot; Issue 53
  DATA f_subcomp   TYPE td_with_subcomp.
  DATA l_mandt     LIKE sy-mandt.                           &quot; Issue 99

  TRY.
    type = component-&gt;get_type( ).
    d_name = component-&gt;get_name( ).
    f_subcomp = component-&gt;get_with_subcomp( ).
    CREATE OBJECT object.
    object-&gt;set_component( component ).
    CASE type.
      WHEN supportedtypes-sys_variant OR supportedtypes-appl_variant.
        CREATE OBJECT o_variant.
        object-&gt;raw = o_variant.
        s_variant = zaplink_vari_data=&gt;name_2_key( d_name ).
        PERFORM get_mandt IN PROGRAM saplsvar USING s_variant-variant &quot; Issue 99
                                           CHANGING l_mandt.
*        CASE type.                                         &quot; Issue 99
*          WHEN supportedtypes-sys_variant.
        SELECT * UP TO 1 ROWS
          INTO TABLE t_varid
          FROM varid CLIENT SPECIFIED
          WHERE mandt = l_mandt
            AND report = s_variant-program
            AND variant = s_variant-variant.
*          WHEN OTHERS.
*            SELECT * UP TO 1 ROWS
*              INTO TABLE t_varid
*              FROM varid
*              WHERE report = s_variant-program
*                AND variant = s_variant-variant.
*        ENDCASE.
        s_fmd_prog-variants = read_variants( t_varid ).
        CHECK NOT s_fmd_prog-variants IS INITIAL.
        READ TABLE s_fmd_prog-variants INDEX 1 INTO s_fmd_vari.
        o_variant-&gt;from_data( s_fmd_vari ).
        CLEAR: o_variant-&gt;a0_maindata-mandt, o_variant-&gt;a0_maindata-report, o_variant-&gt;a0_maindata-variant.
      WHEN supportedtypes-program.
        _prog = d_name = object-&gt;name.
        CREATE OBJECT o_prog.
        SELECT SINGLE *
          INTO s_fmd_prog-header
          FROM progdir    &quot; reposrc
*The databae view &quot;REPOSRC&quot; is write-protected, so it cannot be changed.
          WHERE name = d_name
            AND state = &apos;A&apos;.        &quot; Active
        IF sy-subrc &lt;&gt; 0.
          SELECT SINGLE *
            INTO s_fmd_prog-header
            FROM progdir    &quot;reposrc
            WHERE name = d_name
              AND state = &apos;I&apos;.      &quot; Inactive
        ENDIF.

* Source code
        s_fmd_prog-source = get_prog_source( _prog ).
*    INCLUDE TYPE reposrc. &quot;The databae view &quot;REPOSRC&quot; is write-protected, so it cannot be changed.

* Texts Pool
        s_fmd_prog-textspool = get_prog_textpool( _prog ).

* Dynpro : Issue 8
        s_fmd_prog-dynpros = get_dynpros( _prog ).

* Menu Painter : Issue 9
        s_fmd_prog-menupainter = get_menus( _prog ).

        SELECT *
          INTO TABLE s_fmd_prog-texts
          FROM trdirti
          WHERE name = d_name.

* Documentation
*      CONCATENATE _name &apos;*&apos; INTO _obj. &quot; Issue 7
        s_obj-prog = d_name.
        s_obj-wildcard = &apos;*&apos;.
        _obj = s_obj.
*Issue 7
        s_fmd_prog-docs = zaplink_documentation=&gt;get( ids = zaplink_prog_data=&gt;r_doc_ids-prog
                                                  object = _obj ).

* Issue 53
        IF f_subcomp &gt;= sub_component-with_mine.
          SELECT * INTO TABLE t_varid
            FROM varid CLIENT SPECIFIED
            WHERE mandt = &apos;000&apos;
              AND report = _prog.

          IF f_subcomp &gt;= sub_component-with_required.
            SELECT * APPENDING TABLE t_varid
              FROM varid
              WHERE report = _prog
                AND transport &lt;&gt; zaplink_vari_data=&gt;transport-normal.
            IF f_subcomp &gt;= sub_component-with_all.
              SELECT * APPENDING TABLE t_varid
                FROM varid
                WHERE report = _prog
                  AND transport = zaplink_vari_data=&gt;transport-normal.
            ENDIF.
          ENDIF.
          SORT t_varid BY mandt report variant. DELETE ADJACENT DUPLICATES FROM t_varid COMPARING mandt REPORT variant.

          s_fmd_prog-variants = read_variants( t_varid ).
        ENDIF.

        o_prog-&gt;from_data( s_fmd_prog ).
        o_prog-&gt;_code_signature = get_program_signature( o_prog-&gt;a0_maindata-name ).

        CLEAR o_prog-&gt;a0_maindata-name.
        object-&gt;raw = o_prog.
      WHEN OTHERS.
        CLEAR object.
        mac_raise_type_not_supported me-&gt;class_name type.
    ENDCASE.
    object-&gt;update_connector_data( me ).                    &quot; Issue 66
    mac_def_catch ZCX_ZL_CONNECTOR.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~WRITE_TO_SAP">
    <SOURCE>`
  DATA o_prog      TYPE to_program.
  DATA o_vari      TYPE to_variant.
  DATA s_variant   TYPE ts_variant_key.
  DATA _prog       TYPE programm.
  DATA _oname      TYPE e071-obj_name.
  DATA _rep        TYPE progdir.
  DATA o_comp      TYPE to_component.
*  DATA _name       TYPE td_compname.
  DATA s_fmd_prog  TYPE ts_fm_data.
  DATA s_fmd_vari  TYPE ts_fmd_vari.
  DATA t_vari      TYPE tt_variants.
  FIELD-SYMBOLS &lt;v&gt; LIKE LINE OF o_prog-&gt;variants.

  TRY.

    CREATE OBJECT components.                         &quot; Issue 92
    CASE object-&gt;type.
      WHEN supportedtypes-sys_variant OR supportedtypes-appl_variant.
        o_vari ?= object-&gt;raw.    s_variant = zaplink_vari_data=&gt;name_2_key( object-&gt;name ).
        o_vari-&gt;a0_maindata-report = s_variant-program.   o_vari-&gt;a0_maindata-variant = s_variant-variant.
        s_fmd_vari = o_vari-&gt;to_data( ).    APPEND s_fmd_vari TO s_fmd_prog-variants.
        write_variants( s_fmd_prog-variants ).

      WHEN supportedtypes-program.
        o_prog ?= object-&gt;raw.
        _oname = _prog = o_prog-&gt;a0_maindata-name = object-&gt;name.
        s_fmd_prog = o_prog-&gt;to_data( ).
        CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
          EXPORTING
            object                  = &apos;REPS&apos;
            obj_name                = _oname
*              DELETED_FLAG            = &apos; &apos;
*           IMPORTING
*             OBJECT_INSERTED         =
          EXCEPTIONS
            wrong_object_name       = 1
            OTHERS                  = 2.
        IF sy-subrc &lt;&gt; 0.
          mac_add_mf_and_raise &apos;RS_INSERT_INTO_WORKING_AREA&apos; sy-subrc.
        ENDIF.

        CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
          EXPORTING
            object                  = &apos;REPT&apos;
            obj_name                = _oname
*              DELETED_FLAG            = &apos; &apos;
*            IMPORTING
*              OBJECT_INSERTED         =
          EXCEPTIONS
            wrong_object_name       = 1
            OTHERS                  = 2.
        IF sy-subrc &lt;&gt; 0.
          mac_add_mf_and_raise &apos;RS_INSERT_INTO_WORKING_AREA&apos; sy-subrc.
        ENDIF.

        MOVE-CORRESPONDING s_fmd_prog-header TO _rep.
        _rep-state = &apos;I&apos;.   MODIFY progdir FROM _rep.
*      MODIFY reposrc FROM _rep. &quot;The databae view &quot;REPOSRC&quot; is write-protected, so it cannot be changed.
        _rep-state = &apos;A&apos;.   MODIFY progdir FROM _rep.

* Source code
        set_prog_source( program = _prog
                          source = s_fmd_prog-source ).
* Text Pool
        set_prog_textpool( program = _prog
                          textpool = s_fmd_prog-textspool ).
* Dynpro : Issue 8
        set_dynpros( program = _prog
                     dynpros = s_fmd_prog-dynpros ).

* Menu Painter : Issue 9
        set_menus( program = _prog
                     menus = s_fmd_prog-menupainter ).

* Documentation
        zaplink_documentation=&gt;set( t_docs = s_fmd_prog-docs ).

*Texts
        DELETE FROM trdirti WHERE name = s_fmd_prog-header-name.
        MODIFY trdirti FROM TABLE s_fmd_prog-texts.

* Variants
        t_vari = write_variants( s_fmd_prog-variants ).
        LOOP AT o_prog-&gt;variants ASSIGNING &lt;v&gt;.
          o_vari ?= &lt;v&gt;-zl_object-&gt;raw.
          READ TABLE t_vari TRANSPORTING NO FIELDS WITH KEY header-variant = o_vari-&gt;a0_maindata-variant.
          IF sy-subrc = 0.
            o_comp = &lt;v&gt;-zl_object-&gt;get_component( abap_true ).
            components-&gt;add( o_comp ).    components-&gt;select( o_comp ).
* Done in Write_variants
*          ELSE.
** Can&apos;t insert variant &apos;&amp;1&apos; for program &apos;&amp;2&apos;, because don&apos;t exist as active
*            SET EXTENDED CHECK OFF.
*            IF 1 = 2.   MESSAGE i003 WITH space space.   ENDIF.
*            SET EXTENDED CHECK ON.
*            CALL METHOD application_log-&gt;add_error
*              EXPORTING
**                id_msgid = &apos;ZAPLINK&apos;
*                id_msgno = &apos;003&apos;
*                id_msgv1 = s_fmd_prog-header-name
*                id_msgv2 = o_vari-&gt;a0_maindata-variant.
          ENDIF.
        ENDLOOP.

      WHEN OTHERS.
        mac_raise_type_not_supported me-&gt;class_name object-&gt;type.
    ENDCASE.
    check_component_list( EXPORTING     object = object
                           CHANGING components = components ). &quot; Issue 92
    mac_def_catch ZCX_ZL_CONNECTOR.
  ENDTRY.</SOURCE>
   </ITEM>
  </REDEFINITIONS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" EXPLICIT="X"/>
   <ITEM TYPEGROUP="RSDS" EXPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TD_VARIANT" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="VARID-VARIANT">
    <TEXTS>
     <ITEM LANG="E" TEXT="ABAP: Name of variant (without program name)"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_PROGRAM" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_PROG_DATA">
    <TEXTS>
     <ITEM LANG="E" TEXT="Data for Program"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_RAW_VARIANT" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="1" TYPE="ZAPLINK_PROG_DATA=&gt;TO_VARIANT">
    <TEXTS>
     <ITEM LANG="E" TEXT="Variant Raw object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_VARIANT" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZAPLINK_VARI_DATA">
    <TEXTS>
     <ITEM LANG="E" TEXT="Data for Variant"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TR_SO_VALUE" EXPOSURE="2" STATE="1" TYPTYPE="1" TYPE="ZAPLINK_VARI_DATA=&gt;TR_STRING"/>
   <ITEM CMPNAME="TS_FMD_VARI" STATE="1" EDITORDER="4 " TYPTYPE="1" TYPE="ZAPLINK_VARI_DATA=&gt;TS_FM_DATA"/>
   <ITEM CMPNAME="TS_FM_DATA" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="ZAPLINK_PROG_DATA=&gt;TS_FM_DATA"/>
   <ITEM CMPNAME="TS_PROG_ATTR" STATE="1" EDITORDER="1 " TYPTYPE="4">
    BEGIN OF ts_prog_attr.
  INCLUDE TYPE ts_base_attributs AS base.
  TYPES:
    END OF ts_prog_attr
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Program Attributs"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_SOURCE" EXPOSURE="2" STATE="1" EDITORDER="8 " TYPTYPE="1" TYPE="STRING">
    <TEXTS>
     <ITEM LANG="E" TEXT="ABAP Source code"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_SO_VALUE" EXPOSURE="2" STATE="1" EDITORDER="9 " TYPTYPE="4">begin of ts_so_value,
        sign    type BAPISIGN,
        option  type BAPIOPTION,
        low     type string,
        high    type string,
      END OF ts_so_value
`</ITEM>
   <ITEM CMPNAME="TS_TEXT" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4">BEGIN OF ts_text,
        langu   TYPE spras,
        entry	  TYPE textpooltx,
        length  TYPE textpoolln,
      END OF ts_text
`</ITEM>
   <ITEM CMPNAME="TS_TEXTPOOL" EXPOSURE="2" STATE="1" EDITORDER="6 " TYPTYPE="4">BEGIN OF ts_textpool,
        id    TYPE  textpoolid,
        key	  TYPE  textpoolky,
        texts TYPE  tt_texts,
      END OF ts_textpool
`</ITEM>
   <ITEM CMPNAME="TS_VARIANT_KEY" STATE="1" EDITORDER="3 " TYPTYPE="1" TYPE="ZAPLINK_VARI_DATA=&gt;TS_VARIANT_KEY"/>
   <ITEM CMPNAME="TT_TEXTPOOLS" EXPOSURE="2" STATE="1" EDITORDER="7 " TYPTYPE="4">
    tt_textpools TYPE SORTED TABLE OF ts_textpool WITH UNIQUE KEY id KEY
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Table of textppool"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_TEXTS" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="4">tt_texts TYPE SORTED TABLE OF ts_text WITH UNIQUE KEY langu
`</ITEM>
   <ITEM CMPNAME="TT_VARIANTS" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="1" TYPE="ZAPLINK_PROG_DATA=&gt;TT_VARI_DATA"/>
   <ITEM CMPNAME="TT_VARIANT_DATA" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="ZAPLINK_VARI_DATA=&gt;TT_PARAMS"/>
   <ITEM CMPNAME="TT_VARIANT_LIST" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="4">tt_variant_list TYPE STANDARD TABLE OF varid WITH DEFAULT KEY
`</ITEM>
   <ITEM CMPNAME="T_RAW" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="1" TYPE="RSWSOURCET">
    <TEXTS>
     <ITEM LANG="E" TEXT="ABAP Source"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>

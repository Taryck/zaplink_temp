<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="5807BCC4290AE0D61A1BFFD8D284914E" CODE_SIGNATURE="6FC13C3BA8F276C098940256C51CDB00" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_CHECKPOINTS" TYPE="CLAS" VERSION="1.01">
 <DEPENDENCIES>
  <ITEM TYPE="CLAS" NAME="ZAPLINK_CONNECTOR_"/>
  <ITEM TYPE="CLAS" NAME="ZAPLINK_ACID_DATA"/>
  <ITEM TYPE="CLAS" NAME="ZAPLINK_AVAR_DATA"/>
 </DEPENDENCIES>
 <DIRECTORY DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X" MSG_ID="ZAPLINK_CHECKPOINTS">
   <INHERITANCE REFCLSNAME="ZAPLINK_CONNECTOR_" STATE="1"/>
   <TEXTS>
    <ITEM LANG="E" TEXT="Connector for Check points">U1&amp;FUNCTIONALITY&amp;
ASIs a connector for :
AS- FUGR : Function Group
U1&amp;RELATIONS&amp;
ASIs part of ZAP Link Framework as Official Connector.
ASRequire Official connector for Program types (PROG).
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AShttps://code.google.com/p/zaplink/wiki/Connector
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" EXPOSURE="2" STATE="1" ATTDECLTYP="2" ATTVALUE="&apos;CNX_CHECKPOINTS&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANG="E" TEXT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="SUPPORTEDKINDS" EXPOSURE="1" STATE="1" ATTDECLTYP="1" TYPTYPE="4">BEGIN OF supportedkinds,
      checkpoint        TYPE td_transport_kind,
      variant           TYPE td_transport_kind,
    END OF supportedkinds
`</ITEM>
   <ITEM CMPNAME="SUPPORTEDTYPES" EXPOSURE="1" STATE="1" ATTDECLTYP="2" TYPTYPE="4">
    BEGIN OF supportedtypes,
      checkpoint        TYPE td_comptype VALUE &apos;ACID&apos;,      &quot;#EC NOTEXT
      variant           TYPE td_comptype VALUE &apos;AVAR&apos;,      &quot;#EC NOTEXT
    END OF supportedtypes
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Connector supported types"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_UUID" STATE="1" ATTDECLTYP="2" ATTVALUE="&apos;D8638E4C3E11CC5AE1000000AC120173&apos;" TYPTYPE="1" TYPE="TD_CONNUUID">
    <TEXTS>
     <ITEM LANG="E" TEXT="UUID for connector Program"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_VER" STATE="1" ATTDECLTYP="2" ATTVALUE="&apos;1.0&apos;" TYPTYPE="1" TYPE="TD_CONNVER">
    <TEXTS>
     <ITEM LANG="E" TEXT="Connector Version"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <DEFERRED>
   <CLASSES>
    <ITEM TYPEGROUP="ZAPLINK_ACID_DATA" TPUTYPE="1" EXPLICIT="X"/>
    <ITEM TYPEGROUP="ZAPLINK_AVAR_DATA" TPUTYPE="1" EXPLICIT="X"/>
   </CLASSES>
  </DEFERRED>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE zaplink_macros.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
  supportedkinds-checkpoint =  zaplink_connectors=&gt;get_typekind( supportedtypes-checkpoint ).
  supportedkinds-variant =  zaplink_connectors=&gt;get_typekind( supportedtypes-variant ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2">
    <TEXTS>
     <ITEM LANG="E" TEXT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
  DATA type LIKE LINE OF supported_types.

  CALL METHOD super-&gt;constructor.
  mac_create_log application_log ballog_subobject space.
  type-type = supportedtypes-checkpoint.    INSERT type INTO TABLE supported_types.
  type-type = supportedtypes-variant.       INSERT type INTO TABLE supported_types.

  uuid = _uuid.
  version = _ver.</SOURCE>
   </ITEM>
  </METHODS>
  <REDEFINITIONS>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~ANONYMIZE">
    <SOURCE>`
  DATA o_checkpoint    TYPE to_checkpoint.
*  DATA o_variant       TYPE to_variant.

  CHECK object IS BOUND.

  CASE object-&gt;type.
    WHEN supportedtypes-checkpoint.
      o_checkpoint ?= object-&gt;raw.
      o_checkpoint-&gt;anonymize( ).
*    WHEN supportedtypes-variant.
*      o_variant ?= object-&gt;raw.
*      o_variant-&gt;anonymize( ).
    WHEN OTHERS.
       mac_raise_type_not_supported me-&gt;class_name object-&gt;type.
  ENDCASE.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~anonymize( object ).
    CATCH ZCX_ZL_CONNECTOR INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~UNANONYMIZE">
    <SOURCE>`
  DATA o_checkpoint    TYPE to_checkpoint.
*  DATA o_variant       TYPE to_variant.

  CHECK object IS BOUND.

  CASE object-&gt;type.
    WHEN supportedtypes-checkpoint.
      o_checkpoint ?= object-&gt;raw.
      o_checkpoint-&gt;unanonymize( ).
*    WHEN supportedtypes-variant.
*      o_variant ?= object-&gt;raw.
*      o_variant-&gt;unanonymize( ).
    WHEN OTHERS.
       mac_raise_type_not_supported me-&gt;class_name object-&gt;type.
  ENDCASE.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~unanonymize( object ).
    CATCH ZCX_ZL_CONNECTOR INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CODE_SIGNATURE~GET_SIGNATURE">
    <SOURCE>`
*  DATA d_group TYPE td_functiongroup_name.
*  DATA d_func  TYPE td_function_name.
*  DATA d_type  TYPE td_comptype.
*
*  TRY.
*    d_type = component-&gt;get_type( ).
*    CASE d_type.
*      WHEN supportedtypes-checkpoint.
*        d_group = component-&gt;get_name( ).
*        result = get_group_signature( d_group ).
*      WHEN supportedtypes-variant.
*        d_func = component-&gt;get_name( ).
*        result = get_function_signature( d_func ).
*      WHEN OTHERS.
*        mac_raise_type_not_supported me-&gt;class_name d_type.
*    ENDCASE.
*
*    mac_def_catch zaplink_cx_connector.
*  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~CREATE_NEW_RAW">
    <SOURCE>`
  DATA o_checkpoint   TYPE to_checkpoint.
  DATA o_variant      TYPE to_variant.

  CASE type.
    WHEN supportedtypes-checkpoint.
      CREATE OBJECT object.
      CREATE OBJECT o_checkpoint.
      object-&gt;raw = o_checkpoint.
    WHEN supportedtypes-variant.
      CREATE OBJECT object.
      CREATE OBJECT o_variant.
      object-&gt;raw = o_variant.
    WHEN OTHERS.
      CLEAR object.
      mac_raise_type_not_supported me-&gt;class_name type.
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~DELETE_FROM_SAP">
    <SOURCE>`
  DATA o_checkpoint   TYPE REF TO cl_aab_id.
  DATA d_checkpoint   TYPE td_checkpoint.
  DATA state          TYPE flag.
  DATA o_variant      TYPE REF TO cl_aab_variant.
*  DATA d_variant      TYPE td_checkpoint.
  DATA type           TYPE td_comptype.
  DATA name           TYPE td_compname.
  DATA s_variant      TYPE zaplink_avar_data=&gt;ts_name.

  TRY.
    type = component-&gt;get_type( ).
    CASE type.
      WHEN supportedtypes-checkpoint.
        d_checkpoint = name = component-&gt;get_name( ).

        CREATE OBJECT o_checkpoint
          EXPORTING
            im_name          = d_checkpoint
          EXCEPTIONS
            name_not_allowed = 1
            OTHERS           = 2.
        IF sy-subrc &lt;&gt; 0.
          RAISE EXCEPTION TYPE ZCX_ZL_CONNECTOR
            EXPORTING textid = ZCX_ZL_CONNECTOR=&gt;not_found
                        type = type
                        name = name.
        ENDIF.

        CALL METHOD o_checkpoint-&gt;enqueue
*          EXPORTING
*            enqueue_mode = &apos;E&apos;
*            no_cts       = SPACE
           EXCEPTIONS
             cts_error    = 1
             foreign_lock = 2
             system_error = 3
             OTHERS       = 4.
        IF sy-subrc &lt;&gt; 0.
          mac_add_obj_meth_and_raise o_checkpoint &apos;ENQUEUE&apos; sy-subrc.
        ENDIF.

        CALL METHOD o_checkpoint-&gt;delete
          EXCEPTIONS
            act_error        = 1
            cts_devclass     = 2
            cts_error        = 3
            id_not_found     = 4
            id_still_used    = 5
            no_authorization = 6
            propt_error      = 7
            prop_error       = 8
            where_used_error = 9
            OTHERS           = 10.
        IF sy-subrc &lt;&gt; 0.
          mac_add_obj_meth_and_raise o_checkpoint &apos;DELETE&apos; sy-subrc.
        ENDIF.

*        o_checkpoint-&gt;dequeue =&gt; Made on commit

      WHEN supportedtypes-variant.
        name = component-&gt;get_name( ).
        s_variant = zaplink_avar_data=&gt;name_2_key( name ).
        CREATE OBJECT o_variant
          EXPORTING
            im_name          = s_variant-name
            im_local         = s_variant-user
          EXCEPTIONS
            name_not_allowed = 1
            no_authorization = 2
            user_not_valid   = 3
            OTHERS           = 4.
        IF sy-subrc &lt;&gt; 0.
          mac_add_name_meth_and_raise &apos;cl_aab_variant&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
        ENDIF.

        CALL METHOD o_variant-&gt;delete
          EXCEPTIONS
            cts_devclass     = 1
            cts_error        = 2
            no_authorization = 3
            prop_error       = 4
            propt_error      = 5
            var_id_error     = 6
            var_not_found    = 7
            others           = 8.
        IF sy-subrc &lt;&gt; 0.
          mac_add_obj_meth_and_raise o_variant &apos;DELETE&apos; sy-subrc.
        ENDIF.

      WHEN OTHERS.
        mac_raise_type_not_supported me-&gt;class_name type.
    ENDCASE.

    mac_def_catch ZCX_ZL_CONNECTOR.
  ENDTRY.

  result = abap_true.
* Issue 137 =&gt; Remove from Working Area
  zaplink_tools=&gt;remove_comp_from_working_area( type = type
                                                name = name ).</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~DO_EXISTS">
    <SOURCE>`
  DATA o_checkpoint   TYPE REF TO cl_aab_id.
  DATA d_checkpoint   TYPE td_checkpoint.
  DATA state          TYPE flag.
  DATA o_variant      TYPE REF TO cl_aab_variant.
*  DATA d_variant      TYPE td_checkpoint.
  DATA type           TYPE td_comptype.
  DATA name           TYPE td_compname.
  DATA s_variant      TYPE zaplink_avar_data=&gt;ts_name.

  exists = me-&gt;exists-not_exists.

  TRY.
    type = component-&gt;get_type( ).
    CASE type.
      WHEN supportedtypes-checkpoint.
        d_checkpoint = component-&gt;get_name( ).
        CREATE OBJECT o_checkpoint
          EXPORTING
            im_name          = d_checkpoint
          EXCEPTIONS
            name_not_allowed = 1
            OTHERS           = 2.
        IF sy-subrc &lt;&gt; 0.
          mac_add_name_meth_and_raise &apos;cl_aab_variant&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
        ELSE.
          o_checkpoint-&gt;get_state( IMPORTING ex_state = state ).
          IF NOT state IS INITIAL.     exists = me-&gt;exists-exists.     ENDIF.
        ENDIF.

      WHEN supportedtypes-variant.
        name = component-&gt;get_name( ).
        s_variant = zaplink_avar_data=&gt;name_2_key( name ).
        CREATE OBJECT o_variant
          EXPORTING
            im_name          = s_variant-name
            im_local         = s_variant-user
          EXCEPTIONS
            name_not_allowed = 1
            no_authorization = 2
            user_not_valid   = 3
            OTHERS           = 4.
        IF sy-subrc &lt;&gt; 0.
          mac_add_name_meth_and_raise &apos;cl_aab_variant&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
        ELSE.
          o_variant-&gt;get_state( IMPORTING ex_state = state ).
          IF NOT state IS INITIAL.     exists = me-&gt;exists-exists.     ENDIF.
        ENDIF.
      WHEN OTHERS.
        mac_raise_type_not_supported me-&gt;class_name type.
    ENDCASE.

    mac_def_catch ZCX_ZL_CONNECTOR.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~IS_SUPPORTED_VERSION">
    <SOURCE>`
  result = abap_false.
  if version = _ver.
    result = abap_true.
  endif.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~READ_FROM_SAP">
    <SOURCE>`
  DATA o_aab_id         TYPE REF TO cl_aab_id.
  DATA o_checkpoint     TYPE to_checkpoint.
  DATA s_fmd_acid       TYPE ts_fmd_acid.
*  DATA d_checkpoint     TYPE td_checkpoint.
  DATA type             TYPE td_comptype.
  DATA name             TYPE td_compname.
  DATA l_mode           TYPE aab_id_mode.
  DATA l_tstamp         TYPE aab_id_act-act_tstamp.
  DATA o_aab_variant    TYPE REF TO cl_aab_variant.
  DATA o_variant        TYPE to_variant.
  DATA s_variant        TYPE zaplink_avar_data=&gt;ts_name.
  DATA s_fmd_avar       TYPE ts_fmd_avar.

  TRY.
    type = component-&gt;get_type( ).
    CREATE OBJECT object.
    object-&gt;set_component( component ).
    CASE type.
      WHEN supportedtypes-checkpoint.
        s_fmd_acid-header-name = name = component-&gt;get_name( ).
        CREATE OBJECT o_aab_id
          EXPORTING
            im_name          = s_fmd_acid-header-name
          EXCEPTIONS
            name_not_allowed = 1
            OTHERS           = 2.
        IF sy-subrc &lt;&gt; 0.
          RAISE EXCEPTION TYPE ZCX_ZL_CONNECTOR
            EXPORTING textid = ZCX_ZL_CONNECTOR=&gt;not_found
                        type = type
                        name = name.
        ENDIF.

*        CALL METHOD o_aab_id-&gt;get_descript
*          EXPORTING
*            im_enforce_db_read   = abap_true
**            im_set_attribute     = &apos;X&apos;
*          IMPORTING
*            ex_descript          = s_fmd_acid-header-descript
*          EXCEPTIONS
*            no_description_found = 1
*            OTHERS               = 2.
*        IF sy-subrc &lt;&gt; 0.
*        ENDIF.
* Multilang =&gt;
        SELECT * INTO TABLE s_fmd_acid-descriptions
          FROM aab_id_propt
          WHERE name = s_fmd_acid-header-name.

* From LSAABP01 : Methode pbo_0310.
        CALL METHOD o_aab_id-&gt;get_all_modes
          IMPORTING
            ex_modes_tab  = s_fmd_acid-modes
          EXCEPTIONS
            no_mode_found = 0     &quot; Having no mode is not an error
            system_error  = 2
            OTHERS        = 3.
        IF sy-subrc &lt;&gt; 0.
          mac_add_obj_meth_and_raise o_aab_id &apos;GET_ALL_MODES&apos; sy-subrc.
        ENDIF.

        CREATE OBJECT o_checkpoint.
        o_checkpoint-&gt;from_data( s_fmd_acid ).
        CLEAR s_fmd_acid-header-name.
        object-&gt;raw = o_checkpoint.

      WHEN supportedtypes-variant.
        name = component-&gt;get_name( ).
        s_variant = zaplink_avar_data=&gt;name_2_key( name ).
        s_fmd_avar-header-name = s_variant-name.
        s_fmd_avar-header-local = s_variant-user.
        CREATE OBJECT o_aab_variant
          EXPORTING
            im_name          = s_fmd_avar-header-name
            im_local         = s_fmd_avar-header-local
          EXCEPTIONS
            name_not_allowed = 1
            no_authorization = 2
            user_not_valid   = 3
            OTHERS           = 4.
        IF sy-subrc &lt;&gt; 0.
          mac_add_name_meth_and_raise &apos;cl_aab_variant&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
        ENDIF.

* Multilang =&gt;
        SELECT * INTO TABLE s_fmd_avar-descriptions
          FROM aab_var_propt
          WHERE name = s_fmd_avar-header-name
           AND local = s_fmd_avar-header-local.

        CALL METHOD o_aab_variant-&gt;get_ids
          IMPORTING
            ex_ids       = s_fmd_avar-modes
          EXCEPTIONS
            id_not_valid = 1
            OTHERS       = 2.
        IF sy-subrc &lt;&gt; 0.
          mac_add_obj_meth_and_raise o_aab_variant &apos;GET_IDS&apos; sy-subrc.
        ENDIF.

        CREATE OBJECT o_variant.
        o_variant-&gt;from_data( s_fmd_avar ).
        CLEAR: s_fmd_avar-header-name, s_fmd_avar-header-local.
        object-&gt;raw = o_variant.
      WHEN OTHERS.
        mac_raise_type_not_supported me-&gt;class_name type.
    ENDCASE.

    object-&gt;update_connector_data( me ).                    &quot; Issue 66
    mac_def_catch ZCX_ZL_CONNECTOR.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~WRITE_TO_SAP">
    <SOURCE>`
  DATA o_aab_id         TYPE REF TO cl_aab_id.
  DATA o_checkpoint     TYPE to_checkpoint.
  DATA s_fmd_acid       TYPE ts_fmd_acid.
  DATA o_variant        TYPE to_variant.
  DATA s_fmd_avar       TYPE ts_fmd_avar.
  DATA _comp            TYPE to_component.
  DATA s_desc           LIKE LINE OF s_fmd_acid-descriptions.
  DATA d_nb_err         TYPE i.
  DATA lt_modes         TYPE aab_id_act_tab.
  DATA o_aab_variant    TYPE REF TO cl_aab_variant.
  DATA s_variant        TYPE zaplink_avar_data=&gt;ts_name.
  DATA s_var_desc       LIKE LINE OF s_fmd_avar-descriptions.
  DATA lt_var_modes     TYPE aab_var_obj_act_tab.
  FIELD-SYMBOLS:
    &lt;o&gt;  LIKE LINE OF lt_modes,
    &lt;v&gt;  LIKE LINE OF lt_var_modes,
    &lt;w&gt;  LIKE LINE OF s_fmd_avar-modes,
    &lt;m&gt;  LIKE LINE OF s_fmd_acid-modes.

  TRY.
      CREATE OBJECT components.
      CASE object-&gt;type.
        WHEN supportedtypes-variant.
          o_variant ?= object-&gt;raw.   s_variant = object-&gt;name.
          o_variant-&gt;a0_maindata-name = s_variant-name.     o_variant-&gt;a0_maindata-local = s_variant-user.
          s_fmd_avar = o_variant-&gt;to_data( ).
          CREATE OBJECT o_aab_variant
            EXPORTING
              im_name          = s_variant-name
              im_local         = s_variant-user
            EXCEPTIONS
              name_not_allowed = 1
              no_authorization = 2
              user_not_valid   = 3
              OTHERS           = 4.
          IF sy-subrc &lt;&gt; 0.
            mac_add_name_meth_and_raise &apos;cl_aab_variant&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
          ENDIF.

          CALL METHOD o_aab_variant-&gt;enqueue
            EXPORTING
              enqueue_mode = &apos;E&apos;
            EXCEPTIONS
              cts_error    = 1
              foreign_lock = 2
              system_error = 3
              OTHERS       = 4.
          IF sy-subrc &lt;&gt; 0.
            mac_add_obj_meth_and_raise o_aab_variant &apos;ENQUEUE&apos; sy-subrc.
          ENDIF.

          CALL METHOD o_aab_variant-&gt;get_ids
            IMPORTING
              ex_ids       = lt_var_modes
            EXCEPTIONS
              id_not_valid = 1
              OTHERS       = 2.
          IF sy-subrc = 0.
            LOOP AT lt_var_modes ASSIGNING &lt;v&gt;.
              READ TABLE s_fmd_avar-modes TRANSPORTING NO FIELDS WITH KEY
                  name = &lt;v&gt;-name
                object = &lt;v&gt;-object.
              CHECK sy-subrc &lt;&gt; 0.
              CALL METHOD o_aab_variant-&gt;del_id
                EXPORTING
                  im_name          = &lt;v&gt;-name
                  im_object        = &lt;v&gt;-object
                EXCEPTIONS
                  id_not_found     = 0
                  no_authorization = 2
                  OTHERS           = 3.
              IF sy-subrc &lt;&gt; 0.
                mac_add_obj_meth_and_raise o_aab_variant &apos;DEL_ID&apos; sy-subrc.
              ENDIF.
            ENDLOOP.
          ENDIF.

          LOOP AT s_fmd_avar-modes ASSIGNING &lt;w&gt;.
            CALL METHOD o_aab_variant-&gt;set_id
              EXPORTING
                im_name              = &lt;w&gt;-name
                im_object            = &lt;w&gt;-object
                im_actmode           = &lt;w&gt;-actmode
              EXCEPTIONS
                id_not_exists        = 1
                id_not_transportable = 2
                no_authorization     = 3
                OTHERS               = 4.
            IF sy-subrc &lt;&gt; 0.
              mac_add_obj_meth_and_raise o_aab_variant &apos;SET_ID&apos; sy-subrc.
            ENDIF.
          ENDLOOP.

          READ TABLE s_fmd_avar-descriptions INTO s_var_desc WITH KEY langu = sy-langu.
          IF sy-subrc &lt;&gt; 0.     READ TABLE s_fmd_avar-descriptions INTO s_var_desc INDEX 1.     ENDIF.
          IF sy-subrc &lt;&gt; 0.     s_var_desc-descript = s_variant-name.     ENDIF.

          CALL METHOD o_aab_variant-&gt;set_descript
            EXPORTING
              im_descript      = s_var_desc-descript
            EXCEPTIONS
              no_authorization = 1
              OTHERS           = 2.
          IF sy-subrc &lt;&gt; 0.
            mac_add_obj_meth_and_raise o_aab_variant &apos;SET_DESCRIPT&apos; sy-subrc.
          ENDIF.

          CALL METHOD o_aab_variant-&gt;save
            EXCEPTIONS
              cts_error             = 1
              no_changes_found      = 2
              no_descript_specified = 3
              prop_error            = 4
              propt_error           = 5
              var_id_error          = 6
              OTHERS                = 7.
          IF sy-subrc &lt;&gt; 0.
            mac_add_obj_meth_and_raise o_aab_variant &apos;SAVE&apos; sy-subrc.
          ENDIF.

*          CALL METHOD o_aab_id-&gt;set_descript
*            EXPORTING
*              im_descript      =
**            EXCEPTIONS
**              no_authorization = 1
**              others           = 2
*                  .
* Multilang =&gt;
          DELETE FROM aab_var_propt WHERE name = s_fmd_avar-header-name
                                     AND local = s_fmd_avar-header-local.
          s_var_desc-name = s_variant-name.     s_var_desc-local = s_variant-user.
          MODIFY s_fmd_avar-descriptions FROM s_var_desc TRANSPORTING name local WHERE name IS INITIAL OR name IS NOT INITIAL.
          INSERT aab_var_propt FROM TABLE s_fmd_avar-descriptions.

          CALL METHOD o_aab_variant-&gt;dequeue
            EXPORTING
              dequeue_mode = &apos;E&apos;.

        WHEN supportedtypes-checkpoint.
          o_checkpoint ?= object-&gt;raw.
          o_checkpoint-&gt;a0_maindata-name = object-&gt;name.
          s_fmd_acid = o_checkpoint-&gt;to_data( ).
          s_fmd_acid-header-name = object-&gt;name.
          CREATE OBJECT o_aab_id
            EXPORTING
              im_name          = s_fmd_acid-header-name
            EXCEPTIONS
              name_not_allowed = 1
              OTHERS           = 2.
          IF sy-subrc &lt;&gt; 0.
            mac_add_name_meth_and_raise &apos;cl_aab_id&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
          ENDIF.

          CALL METHOD o_aab_id-&gt;enqueue
            EXPORTING
              enqueue_mode = &apos;E&apos;
              no_cts       = space
            EXCEPTIONS
              cts_error    = 1
              foreign_lock = 2
              system_error = 3
              OTHERS       = 4.
          IF sy-subrc &lt;&gt; 0.
            mac_add_obj_meth_and_raise o_aab_id &apos;ENQUEUE&apos; sy-subrc.
          ENDIF.

* Delete previously existing modes
          CALL METHOD o_aab_id-&gt;get_all_modes
            IMPORTING
              ex_modes_tab  = lt_modes
            EXCEPTIONS
              no_mode_found = 1
              OTHERS        = 2.
          IF sy-subrc = 0.
            LOOP AT lt_modes ASSIGNING &lt;o&gt;.
              READ TABLE s_fmd_acid-modes TRANSPORTING NO FIELDS WITH KEY
*              name = &lt;o&gt;-name
                username = &lt;o&gt;-username
                server = &lt;o&gt;-server
                is_program = &lt;o&gt;-is_program
                actdefault = &lt;o&gt;-actdefault.
              CHECK sy-subrc &lt;&gt; 0.
              CALL METHOD o_aab_id-&gt;delete_mode
                EXPORTING
                  im_user           = &lt;o&gt;-username
                  im_server         = &lt;o&gt;-server
                  im_actdefault     = &lt;o&gt;-actdefault
                  im_delete_from_db = space
                EXCEPTIONS
                  no_mode_found     = 0
                  no_authorization  = 2
                  act_error         = 1
                  OTHERS            = 4.
              IF sy-subrc &lt;&gt; 0.
                mac_add_obj_meth_and_raise o_aab_id &apos;DELETE_MODE&apos; sy-subrc.
              ENDIF.
            ENDLOOP.
          ENDIF.

          LOOP AT s_fmd_acid-modes ASSIGNING &lt;m&gt;.
            CALL METHOD o_aab_id-&gt;set_mode
              EXPORTING
                im_user            = &lt;m&gt;-username
                im_server          = &lt;m&gt;-server
                im_actdefault      = &lt;m&gt;-actdefault
                im_mode            = &lt;m&gt;-actmode
*                im_act_tstamp      =
*                im_exp_tstamp      =
*                im_no_autho_check  = SPACE
               IMPORTING
                 ex_nr_of_conflicts = d_nb_err
               EXCEPTIONS
                 no_authorization   = 1
                 OTHERS             = 2.
            IF sy-subrc &lt;&gt; 0.
              mac_add_obj_meth_and_raise o_aab_id &apos;SET_MODE&apos; sy-subrc.
            ELSEIF d_nb_err &lt;&gt; 0.

            ENDIF.
          ENDLOOP.

          CALL METHOD o_aab_id-&gt;save
*            EXPORTING
*              no_change_rtm_activation = SPACE
            EXCEPTIONS
              act_error                = 1
              cts_error                = 2
              no_changes_found         = 3
              no_descript_specified    = 4
              prop_error               = 5
              propt_error              = 6
              sync_attributes_error    = 7
              OTHERS                   = 8.
          IF sy-subrc &lt;&gt; 0.
            mac_add_obj_meth_and_raise o_aab_id &apos;SAVE&apos; sy-subrc.
          ENDIF.

*          CALL METHOD o_aab_id-&gt;set_descript
*            EXPORTING
*              im_descript      =
**            EXCEPTIONS
**              no_authorization = 1
**              others           = 2
*                  .
* Multilang =&gt;
          DELETE FROM aab_id_propt WHERE name = s_fmd_acid-header-name.
          s_desc-name = s_fmd_acid-header-name.   MODIFY s_fmd_acid-descriptions FROM s_desc TRANSPORTING name WHERE name &lt;&gt; s_fmd_acid-header-name.
          INSERT aab_id_propt FROM TABLE s_fmd_acid-descriptions.

          CALL METHOD o_aab_id-&gt;dequeue
            EXPORTING
              dequeue_mode = &apos;E&apos;.

        WHEN OTHERS.
          mac_raise_type_not_supported me-&gt;class_name object-&gt;type.
      ENDCASE.
      check_component_list( EXPORTING     object = object
                             CHANGING components = components ). &quot; Issue 92

    CATCH ZCX_ZL_CONNECTOR INTO o_mycx.
      ROLLBACK WORK.
      RAISE EXCEPTION o_mycx.
    CATCH zcx_zaplink INTO o_cx.
      ROLLBACK WORK.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
  </REDEFINITIONS>
  <TEXTSPOOL>
   <ITEM ID="I" KEY="D00">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Confirm module function deletion" LENGTH="50 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="HNO">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Function is not deleted and process to next existing function. Function group will be created without this function." LENGTH="132 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="HYE">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Function is deleted. Function group will be created with this function." LENGTH="132 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="NO_">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="No" LENGTH="15 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="YES">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Yes" LENGTH="15 "/>
    </TEXTS>
   </ITEM>
  </TEXTSPOOL>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" EXPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TD_CHECKPOINT" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="1" TYPE="AAB_ID_NAME">
    <TEXTS>
     <ITEM LANG="E" TEXT="Checkpoint Group"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TD_VARIANT" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="1" TYPE="STRING"/>
   <ITEM CMPNAME="TO_CHECKPOINT" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_ACID_DATA">
    <TEXTS>
     <ITEM LANG="E" TEXT="Data for Checkpoint"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_VARIANT" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZAPLINK_AVAR_DATA">
    <TEXTS>
     <ITEM LANG="E" TEXT="Data for Checkpoint variant"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_FMD_ACID" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="1" TYPE="ZAPLINK_ACID_DATA=&gt;TS_FM_DATA">
    <TEXTS>
     <ITEM LANG="E" TEXT="FM Data for check points"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_FMD_AVAR" EXPOSURE="1" STATE="1" EDITORDER="6 " TYPTYPE="1" TYPE="ZAPLINK_AVAR_DATA=&gt;TS_FM_DATA">
    <TEXTS>
     <ITEM LANG="E" TEXT="FM Data for check points variant"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>

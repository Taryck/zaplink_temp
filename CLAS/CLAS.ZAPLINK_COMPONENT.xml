<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="682FCDF0DE9355C61582BFF758ECDD3F" CODE_SIGNATURE="F627DCF29DDA2161B7C108F3215F4895" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_COMPONENT" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-CORE" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <TEXTS>
    <ITEM LANG="E" TEXT="Zap Link Component">U1&amp;FUNCTIONALITY&amp;
ASThis object is the concept of &quot;ABAP Component&quot; which is used to identify
  and component either for individual actions or in a list (ZAPLINK_LIST).
U1&amp;RELATIONS&amp;
AS
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
ASYou can&apos;t access directly to object attributes, you have to use &quot;Getter&quot;
  and &quot;Setter&quot; like in Java Frameworks. This allow to protect attributes
  from changes.
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AS
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="DEFAULT_SUB_COMPONENT_LEVEL" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="DEFAULT_SUB_COMPONENT_LEVEL"/>
   <ITEM CMPNAME="EXISTS" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="EXISTS"/>
   <ITEM CMPNAME="TD_ACTION" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ACTION"/>
   <ITEM CMPNAME="TD_CHECKSUM" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CHECKSUM"/>
   <ITEM CMPNAME="TD_COMPADD_DATA" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPADD_DATA"/>
   <ITEM CMPNAME="TD_COMPEXISTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPEXISTS"/>
   <ITEM CMPNAME="TD_COMPNAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPNAME"/>
   <ITEM CMPNAME="TD_COMPTYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPTYPE"/>
   <ITEM CMPNAME="TD_CONNCLASS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNCLASS"/>
   <ITEM CMPNAME="TD_CONNEXISTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNEXISTS"/>
   <ITEM CMPNAME="TD_CONNUUID" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNUUID"/>
   <ITEM CMPNAME="TD_DEVCLASS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DEVCLASS"/>
   <ITEM CMPNAME="TD_OBJ_TYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_OBJ_TYPE"/>
   <ITEM CMPNAME="TD_SRCSYSTEM" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_SRCSYSTEM"/>
   <ITEM CMPNAME="TD_TRANSPORT_KIND" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TRANSPORT_KIND"/>
   <ITEM CMPNAME="TD_WITH_SUBCOMP" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_WITH_SUBCOMP"/>
   <ITEM CMPNAME="TS_COMPKEY" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPKEY"/>
   <ITEM CMPNAME="TS_COMPONENT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPONENT"/>
   <ITEM CMPNAME="TS_CONN_CLASS" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONN_CLASS"/>
   <ITEM CMPNAME="TT_TYPES" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TYPES"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="CONNEXISTS" EXPOSURE="2" STATE="1" ATTDECLTYP="2" TYPTYPE="4">
    BEGIN OF connexists,
          exists     TYPE td_connexists VALUE ZAPLINK_DATATYPES~EXISTS-exists,
          not_exists TYPE td_connexists VALUE ZAPLINK_DATATYPES~EXISTS-not_exists,
        END OF connexists
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Connector Exists constants"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="LOCAL_DEVCLASS" EXPOSURE="1" STATE="1" ATTDECLTYP="2" ATTVALUE="&apos;$LOCAL$&apos;" TYPTYPE="1" TYPE="TD_DEVCLASS">
    <TEXTS>
     <ITEM LANG="E" TEXT="Devclass for Local class"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="MY_ATTRIBS" STATE="1" ATTDECLTYP="1" TYPTYPE="1" TYPE="ABAP_ATTRDESCR_TAB"/>
   <ITEM CMPNAME="NAME" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TD_COMPNAME">
    <TEXTS>
     <ITEM LANG="E" TEXT="Object Name"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_CX" STATE="1" ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_ROOT_EXCEPTION">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_MYCX" STATE="1" ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_EXCEPTION">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink ROOT Exception for Connectors"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TYPE" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TD_COMPTYPE">
    <TEXTS>
     <ITEM LANG="E" TEXT="Object Type"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="WITH_SUBCOMP" EXPOSURE="1" STATE="1" ATTVALUE="ABAP_TRUE" TYPTYPE="1" TYPE="TD_WITH_SUBCOMP">
    <TEXTS>
     <ITEM LANG="E" TEXT="Also do Sub Component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_ACTION" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TD_ACTION">
    <TEXTS>
     <ITEM LANG="E" TEXT="Action for the component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_CHECKSUM" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TD_CHECKSUM">
    <TEXTS>
     <ITEM LANG="E" TEXT="Checksum of the whole component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_CLASSES" EXPOSURE="1" STATE="1" ATTDECLTYP="1" TYPTYPE="1" TYPE="TT_CLASSES">
    <TEXTS>
     <ITEM LANG="E" TEXT="Classe list"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_CODE_SIGNATURE" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TD_CHECKSUM">
    <TEXTS>
     <ITEM LANG="E" TEXT="Checksum of the source code only (if applies)"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_CONNECTOR" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TS_CONNDATA">
    <TEXTS>
     <ITEM LANG="E" TEXT="Connector Info"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_DATA" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TD_COMPADD_DATA">
    <TEXTS>
     <ITEM LANG="E" TEXT="Additional Data to store"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_DEVCLASS" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TD_DEVCLASS">
    <TEXTS>
     <ITEM LANG="E" TEXT="Devlopment class"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_EXCEPTION" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TO_CONN_EXCEPTION">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink ROOT Exception for Connectors"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_EXISTS" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TD_COMPEXISTS">
    <TEXTS>
     <ITEM LANG="E" TEXT="Component exists in SAP"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_KIND" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TD_TRANSPORT_KIND"/>
   <ITEM CMPNAME="_MSG_COLL" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TO_MSG_COLL">
    <TEXTS>
     <ITEM LANG="E" TEXT="Message Collector"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_OBJECT" EXPOSURE="1" STATE="1" TYPTYPE="3" TYPE="OBJECT">
    <TEXTS>
     <ITEM LANG="E" TEXT="Additional information as object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_SRCSYSTEM" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TD_SRCSYSTEM">
    <TEXTS>
     <ITEM LANG="E" TEXT="Source System"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_SUBCOMPONENTS" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TO_LIST">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZapLink Components list"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <FRIENDS>
   <ITEM REFCLSNAME="ZAPLINK_LIST" STATE="1"/>
  </FRIENDS>
  <INTERFACES>
   <ITEM REFCLSNAME="ZAPLINK_DATATYPES" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  </INTERFACES>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE zaplink_macros.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="CLONE" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Clone Component"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TO_ME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Zap Link Component"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  CREATE OBJECT result.
  result-&gt;copy_from( me ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONNECTOR" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Connector : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TO_CONNECTOR">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAP Link Connector interface"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _connector-o_conn.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONNECTOR_EXISTS" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Connector Exists : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_CONNEXISTS">
      <TEXTS>
       <ITEM LANG="E" TEXT="Connector exists (&apos;X&apos;) or not (&apos; &apos;)"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _connector-exists.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2">
    <TEXTS>
     <ITEM LANG="E" TEXT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
  DATA o_obj TYPE REF TO cl_abap_objectdescr.
  IF my_attribs IS INITIAL.         &quot; can&apos;t be in class constructor because me not yet exists
    o_obj ?= cl_abap_typedescr=&gt;describe_by_object_ref( me ).
    my_attribs = o_obj-&gt;attributes.
    DELETE my_attribs WHERE is_class = abap_true    &quot; remove class attributes
                      OR is_constant = abap_true.   &quot; remove constants.
  ENDIF.
  set_with_subcomp( default_sub_component_level ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="COPY_FROM" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Copy attributes from other Component"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_ME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Zap Link Component"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  FIELD-SYMBOLS:
    &lt;s&gt; TYPE ANY,
    &lt;t&gt; TYPE ANY,
    &lt;a&gt; LIKE LINE OF my_attribs.

  me-&gt;type = component-&gt;type.
  me-&gt;name = component-&gt;name.
  LOOP AT my_attribs ASSIGNING &lt;a&gt;.
    ASSIGN me-&gt;(&lt;a&gt;-name) TO &lt;t&gt;.   CHECK sy-subrc = 0.
    ASSIGN COMPONENT-&gt;(&lt;a&gt;-name) TO &lt;s&gt;.   CHECK sy-subrc = 0.
    &lt;t&gt; = &lt;s&gt;.
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CREATE_NEW" EXPOSURE="1" STATE="1" MTDDECLTYP="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Create new component from key"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="KEY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TS_COMPKEY">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Key (unique)"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TO_ME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Zap Link Component"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZAPLINK" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _cx TYPE REF TO ZCX_ZL_COMPONENT.
*  TRY.
      CREATE OBJECT result.
      result-&gt;_set_key( key ).
*    CATCH ZCX_ZL_COMPONENT INTO _cx.
*      RAISE EXCEPTION _cx.
*  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="DO_EXISTS" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Component Exists : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_COMPEXISTS"/>
    </PARAMETERS>
    <SOURCE>`
  result = _exists.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_ACTION" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Action : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_ACTION">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Checksum"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _action.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_ADD_DATA" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Additional Data : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_COMPADD_DATA">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Checksum"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_ADD_OBJECT" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Additional Object : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="3" TYPE="OBJECT">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Checksum"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _object.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_CHECKSUM" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Checksum : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_CHECKSUM">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Checksum"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _checksum.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_CODE_SIGNATURE" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Code Signature : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_CHECKSUM">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Checksum"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _code_signature.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_CONNUUID" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Connector UUID : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_CONNUUID">
      <TEXTS>
       <ITEM LANG="E" TEXT="Connector UUID"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _connector-uuid.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_DEVCLASS" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="DevClass : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_DEVCLASS">
      <TEXTS>
       <ITEM LANG="E" TEXT="Devlopment class"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _devclass.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_EXCEPTION" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Exception : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TO_ROOT_EXCEPTION">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink ROOT Exception"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _exception.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_KEY" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Key : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TS_COMPONENT">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Key (unique)"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZAPLINK" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  IF type IS INITIAL OR name IS INITIAL.
    RAISE EXCEPTION TYPE ZCX_ZL_COMPONENT
               EXPORTING textid = ZCX_ZL_COMPONENT=&gt;system_error.
  ENDIF.
  result-type = type.
  result-name = name.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_MSG_COLL" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Message Collector : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TO_MSG_COLL">
      <TEXTS>
       <ITEM LANG="E" TEXT="Object Type"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _msg_coll.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_NAME" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Name : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_COMPNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Object Name"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = name.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_SRC_SYS" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Source System : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_SRCSYSTEM">
      <TEXTS>
       <ITEM LANG="E" TEXT="Source System"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _srcsystem.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_SUBCOMPONENTS" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Sub-Components list : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANG="E" TEXT="Object Type"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _subcomponents.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_TYPE" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Type : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_COMPTYPE">
      <TEXTS>
       <ITEM LANG="E" TEXT="Object Type"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = type.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_TYPEKIND" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Transport Kind of Type : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_TRANSPORT_KIND">
      <TEXTS>
       <ITEM LANG="E" TEXT="Transport kind"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = _kind.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_WITH_SUBCOMP" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="With Sub Component : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_WITH_SUBCOMP">
      <TEXTS>
       <ITEM LANG="E" TEXT="With subComp Flag"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = with_subcomp.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="ON_CHANGE_CLEAR" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Type or Name change : clear attr"/>
    </TEXTS>
    <SOURCE>`
  CLEAR: _exists, _connector-uuid, _code_signature, _checksum.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="ON_CHANGE_UPDATE" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Type or Name change : update attr"/>
    </TEXTS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZAPLINK" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_cx_cnx TYPE to_conn_exception.
  IF _connector-o_conn IS BOUND AND NOT name IS INITIAL.
*    TRY.
       _exists = _connector-o_conn-&gt;do_exists( me ).
*      CATCH zaplink_cx_connector INTO o_cx_cnx.
*        mac_cascade_raise o_mycx o_cx_cnx.
*    ENDTRY.
    _connector-uuid = _connector-o_conn-&gt;uuid.

    CHECK NOT type IS INITIAL.
    _kind = zaplink_connectors=&gt;get_typekind( type ).

    SELECT SINGLE devclass srcsystem INTO (_devclass, _srcsystem)
      FROM tadir
      WHERE pgmid = _kind
       AND object = type
       AND obj_name = name.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="REFRESH" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Refresh component informations"/>
    </TEXTS>
    <SOURCE>`
  TRY.
      on_change_update( ).                                  &quot; Issue 31
    CATCH ZCX_ZAPLINK.   &quot;_COMPONENT INTO o_mycx.
*      RAISE EXCEPTION o_mycx.    &quot; Exception is ignored
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_ACTION" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Action : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_ACTION">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Checksum"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  _action = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_ADD_DATA" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Additional Data : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPADD_DATA">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Checksum"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  _data = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_ADD_OBJECT" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Additional Object : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="3" TYPE="OBJECT">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Checksum"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  _object = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_CHECKSUM" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Checksum : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_CHECKSUM">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Checksum"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  _checksum = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_CODE_SIGNATURE" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Code Signature : Settter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_CHECKSUM">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Checksum"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  _code_signature = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_CONNUUID" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Connector UUID : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_CONNUUID">
      <TEXTS>
       <ITEM LANG="E" TEXT="Connector UUID"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZAPLINK" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
*  DATA _cx    TYPE to_root_exception.
  DATA o_conn TYPE to_connector.

  CHECK data &lt;&gt; _connector-uuid.

*  TRY.
  o_conn = zaplink_connectors=&gt;create_connector( type = type
                                             connuuid = data ).

  _connector-o_conn = o_conn.
  on_change_clear( ).
  _connector-uuid = data.
  IF o_conn IS BOUND.
    _connector-exists = connexists-exists.
  ELSE.
    _connector-exists = connexists-not_exists.
  ENDIF.
  on_change_update( ).

*    CATCH zaplink_cx INTO o_cx.
*      mac_cascade_raise o_mycx o_cx.
*  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_DEVCLASS" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="DevClass : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DEVCLASS">
      <TEXTS>
       <ITEM LANG="E" TEXT="Devlopment class"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  CHECK data &lt;&gt; _devclass.
  _devclass = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_EXCEPTION" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Exception : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_ROOT_EXCEPTION">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink ROOT Exception"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZAPLINK" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA cx TYPE REF TO cx_root.
  DATA _cx TYPE REF TO ZCX_ZL_COMPONENT.
  DATA _desc TYPE REF TO cl_abap_typedescr.

  IF data IS BOUND.
    TRY.
        _exception ?= data.
      CATCH cx_root INTO cx.
        _desc = cl_abap_typedescr=&gt;describe_by_object_ref( data ).
* Can&apos;t set Exception to the provided object type : &apos;&amp;OBJTYPE&amp;&apos;
        CREATE OBJECT _cx
          EXPORTING
            textid   = ZCX_ZL_COMPONENT=&gt;invalid_exception
            objtype  = _desc-&gt;absolute_name
            previous = cx.
        _cx-&gt;update( ).
        RAISE EXCEPTION _cx.
    ENDTRY.
  ELSE.
    CLEAR _exception.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_MSG_COLL" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Message Collector : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_MSG_COLL">
      <TEXTS>
       <ITEM LANG="E" TEXT="Object Type"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZAPLINK" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA cx TYPE REF TO cx_root.
  DATA _cx TYPE REF TO ZCX_ZL_COMPONENT.
  DATA _desc TYPE REF TO cl_abap_typedescr.

  IF data IS BOUND.
    TRY.
        _msg_coll ?= data.
      CATCH cx_root INTO cx.
        _desc = cl_abap_typedescr=&gt;describe_by_object_ref( data ).
* Can&apos;t set Message Collector to the provided object type : &apos;&amp;OBJTYPE&amp;&apos;
        CREATE OBJECT _cx
          EXPORTING
            textid   = ZCX_ZL_COMPONENT=&gt;invalid_msg_coll
            objtype  = _desc-&gt;absolute_name
            previous = cx.
        _cx-&gt;update( ).
        RAISE EXCEPTION _cx.
    ENDTRY.
  ELSE.
    CLEAR _msg_coll.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_NAME" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Name : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY">
      <TEXTS>
       <ITEM LANG="E" TEXT="Object Name"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZAPLINK" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  CHECK data &lt;&gt; name.
  name = data.
  on_change_clear( ).
  on_change_update( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_SRC_SYS" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Source System: Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_SRCSYSTEM">
      <TEXTS>
       <ITEM LANG="E" TEXT="Source System"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  _srcsystem = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_SUBCOMPONENTS" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Sub-Components list : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANG="E" TEXT="Object Type"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZAPLINK" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA cx TYPE REF TO cx_root.
  DATA _cx TYPE REF TO ZCX_ZL_COMPONENT.
  DATA _desc TYPE REF TO cl_abap_typedescr.

  IF data IS BOUND.
    TRY.
        _subcomponents ?= data.
      CATCH cx_root INTO cx.
        _desc = cl_abap_typedescr=&gt;describe_by_object_ref( data ).
* Can&apos;t set Message Collector to the provided object type : &apos;&amp;OBJTYPE&amp;&apos;
        CREATE OBJECT _cx
          EXPORTING
            textid   = ZCX_ZL_COMPONENT=&gt;invalid_subcomponents
            objtype  = _desc-&gt;absolute_name
            previous = cx.
        _cx-&gt;update( ).
        RAISE EXCEPTION _cx.
    ENDTRY.
  ELSE.
    CLEAR _msg_coll.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_TYPE" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Type : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPTYPE">
      <TEXTS>
       <ITEM LANG="E" TEXT="Object Type"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZAPLINK" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_conn   TYPE to_connector.
  DATA o_cx_cnx TYPE TO_CONN_EXCEPTION.

  CHECK data &lt;&gt; type.

*  TRY.
  TRY.
      o_conn = zaplink_connectors=&gt;create_connector( type = data ).
    CATCH ZCX_ZL_CONNECTOR INTO o_cx_cnx.
      IF o_cx_cnx-&gt;is_exception_text( ZCX_ZL_CONNECTOR=&gt;invalid_type ) IS INITIAL.    RAISE EXCEPTION o_cx_cnx.   ENDIF.
  ENDTRY.

  type = data.    CLEAR _connector.
  on_change_clear( ).
  _connector-o_conn = o_conn.
  IF o_conn IS BOUND.   _connector-exists = connexists-exists.    ELSE.     _connector-exists = connexists-not_exists.    ENDIF.
  on_change_update( ).

*    CATCH zaplink_cx INTO o_cx.
*      mac_cascade_raise o_mycx o_cx.
*  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_WITH_SUBCOMP" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="With Sub Component : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_WITH_SUBCOMP">
      <TEXTS>
       <ITEM LANG="E" TEXT="With sub Comp Flag"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  CHECK data &lt;&gt; with_subcomp.
  with_subcomp = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_GET_KEY" EXPOSURE="1" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Key : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TS_COMPKEY">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Key (unique)"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result-type = type.
  result-name = name.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_SET_KEY" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Key : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" TYPTYPE="1" TYPE="TS_COMPKEY">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component Key (unique)"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZAPLINK" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _cx TYPE REF TO ZCX_ZL_COMPONENT.
*  TRY.
      set_type( data-type ).
      set_name( data-name ).
*    CATCH ZCX_ZL_COMPONENT INTO _cx.
*      RAISE EXCEPTION _cx.
*  ENDTRY.</SOURCE>
   </ITEM>
  </METHODS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" EXPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TO_CONNECTOR" EXPOSURE="2" STATE="1" EDITORDER="6 " TYPTYPE="3" TYPE="ZAPLINK_CONNECTOR">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAP Link Connector interface"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_CONN_EXCEPTION" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZCX_ZL_CONNECTOR">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_EXCEPTION" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="3" TYPE="ZCX_ZL_COMPONENT">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink ROOT Exception for Connectors"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_LIST" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_LIST">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZapLink Components list"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_ME" EXPOSURE="2" STATE="1" EDITORDER="7 " TYPTYPE="3" TYPE="ZAPLINK_COMPONENT">
    <TEXTS>
     <ITEM LANG="E" TEXT="Zap Link Component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_MSG_COLL" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="3" TYPE="ZAPLINK_MESSAGE_COLLECTOR">
    <TEXTS>
     <ITEM LANG="E" TEXT="Message Collector"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_ROOT_EXCEPTION" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZCX_ZAPLINK">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_CLASS" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="4">BEGIN OF ts_class.
INCLUDE TYPE ts_conn_class.
TYPES:
    types TYPE tt_types,   &quot; supported_types
  END OF ts_class
`</ITEM>
   <ITEM CMPNAME="TS_CONNDATA" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="4">
    BEGIN OF ts_conndata,
          uuid      type td_connuuid,
          exists    TYPE td_connexists,
*          classname TYPE td_connclass,
          o_conn    TYPE to_connector,
        END OF ts_conndata
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Connector Info"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_CLASSES" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="4">tt_classes TYPE SORTED TABLE OF ts_class WITH UNIQUE KEY classname
`</ITEM>
   <ITEM CMPNAME="TT_SAPTYPES" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="4">
    tt_saptypes TYPE HASHED TABLE OF ko100 WITH UNIQUE KEY object
`
    <TEXTS>
     <ITEM LANG="E" TEXT="List of SAP CTS Types"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>

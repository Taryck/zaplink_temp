<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="ADF73ACF695A95E5C54999BFCC535765" CODE_SIGNATURE="DF24EB0E0CFCE02861F42DA13B0F29E3" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_FUNC_DATA" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <INHERITANCE REFCLSNAME="ZAPLINK_RAW_DATA" STATE="1"/>
   <TEXTS>
    <ITEM LANG="E" TEXT="Data for Function">U1&amp;FUNCTIONALITY&amp;
ASIs part of connector : ZAPLINK_FUNCTION_GROUP
ASDefine XML structure of a Function group
U1&amp;RELATIONS&amp;
AS
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AS
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="LINE_SEPARATOR" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="LINE_SEPARATOR"/>
   <ITEM CMPNAME="TD_ABAPSOURCE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ABAPSOURCE"/>
   <ITEM CMPNAME="TD_CHECKSUM" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CHECKSUM"/>
   <ITEM CMPNAME="TD_DOC_ID" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DOC_ID"/>
   <ITEM CMPNAME="TR_DOCID" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_DOCID"/>
   <ITEM CMPNAME="TT_ABAPRAWSOURCE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_ABAPRAWSOURCE"/>
   <ITEM CMPNAME="TT_DOCS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_DOCS"/>
   <ITEM CMPNAME="TT_DYNPROS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_DYNPROS"/>
   <ITEM CMPNAME="TT_TEXTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TEXTS"/>
   <ITEM CMPNAME="TT_TXTP_TEXTPOOLS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTPOOLS"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="A0_MAINDATA" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TS_MAINDATA">
    <TEXTS>
     <ITEM LANG="E" TEXT="Program main data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="DOC_IDS" STATE="1" ATTDECLTYP="2" TYPTYPE="4">BEGIN OF DOC_IDS,
      group     TYPE td_doc_id VALUE &apos;RE&apos;,    &quot; Report
      function  TYPE td_doc_id VALUE &apos;FU&apos;,
    END OF DOC_IDS
`</ITEM>
   <ITEM CMPNAME="EXCEPTIONS" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TT_EXCEPTIONS"/>
   <ITEM CMPNAME="MARKUPS" STATE="1" ATTDECLTYP="2" TYPTYPE="4">
    BEGIN OF markups,
      area TYPE string VALUE &apos;[FUNCTIONGROUP NAME]&apos;,
    END OF markups
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Markups for replacements"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="PARAMETERS" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TT_PARAMS"/>
   <ITEM CMPNAME="PARAMETER_KINDS" EXPOSURE="1" STATE="1" ATTDECLTYP="2" TYPTYPE="4">BEGIN OF parameter_kinds,
      importing   TYPE td_paramkind VALUE &apos;I&apos;,
      changing    TYPE td_paramkind VALUE &apos;C&apos;,
      exporting   TYPE td_paramkind VALUE &apos;E&apos;,
      table       TYPE td_paramkind VALUE &apos;T&apos;,
*      exceptions  type td_paramkind value &apos;X&apos;,
    END OF parameter_kinds
`</ITEM>
   <ITEM CMPNAME="R_DOC_IDS" STATE="1" ATTDECLTYP="1" TYPTYPE="4">
    BEGIN OF R_DOC_IDS,
      group    TYPE TR_DOCID,
      function TYPE TR_DOCID,
    END OF R_DOC_IDS
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Documentation Object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="SOURCE" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TS_SOURCE">
    <TEXTS>
     <ITEM LANG="E" TEXT="ABAP Source code"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="SUFFIXES" STATE="1" ATTDECLTYP="2" TYPTYPE="4">
    BEGIN OF suffixes,
      top TYPE rs38l-suffix VALUE &apos;TOP&apos;,
    END OF suffixes
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Special suffixes"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TEXTS" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TT_TEXTS"/>
  </ATTRIBUTS>
  <FRIENDS>
   <ITEM REFCLSNAME="ZAPLINK_EASYXML" STATE="1"/>
   <ITEM REFCLSNAME="ZAPLINK_FUGR_DATA" STATE="1"/>
   <ITEM REFCLSNAME="ZAPLINK_FUNCTION_GROUP" STATE="1"/>
   <ITEM REFCLSNAME="ZAPLINK_FUNC_RAW" STATE="1"/>
  </FRIENDS>
  <INTERFACES>
   <ITEM REFCLSNAME="ZAPLINK_DATATYPES" EXPOSURE="2" STATE="1" RELTYPE="1"/>
  </INTERFACES>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="ANONYMIZE" EXPOSURE="1" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Anonymized component data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
*&apos;FU&apos;
*table TDCLT
*DOKCLASS DOKTITEL
*FU       Function
*RE       Report/Function Group, Logical DB                            Program/module pool
  DATA _id LIKE LINE OF r_doc_ids-group.

  _id-sign = &apos;I&apos;.
  _id-option = &apos;EQ&apos;.
  _id-low = doc_ids-group.      APPEND _id TO r_doc_ids-group.
  _id-low = doc_ids-function.   APPEND _id TO r_doc_ids-function.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="FROM_DATA" EXPOSURE="1" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Convert FM Data to object attributes"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="FM_DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TS_FM_DATA">
      <TEXTS>
       <ITEM LANG="E" TEXT="Function Modules object Data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA s_txt     LIKE LINE OF texts.
  DATA s_param   LIKE LINE OF parameters.
  DATA s_excep   LIKE LINE OF exceptions.
  DATA d_suffix  TYPE rs38l-suffix.
  DATA d_group   TYPE rs38l-area.
  DATA t_abapsrc TYPE tt_abaprawsource.
  DATA d_search  TYPE string.
  DATA d_replace TYPE string.
  DATA d_lcount  TYPE i.
  DATA d_doc     TYPE doku_obj.
  DATA d_doc_p   TYPE ts_doc_param.
  DATA t_docs    TYPE tt_docs.
  FIELD-SYMBOLS:
    &lt;d&gt;  LIKE LINE OF fm_data-docs,
    &lt;dt&gt; LIKE LINE OF &lt;d&gt;-texts,
    &lt;t&gt;  LIKE LINE OF fm_data-texts,
    &lt;s&gt;  LIKE LINE OF fm_data-source,
    &lt;im&gt; LIKE LINE OF fm_data-import_p,
    &lt;ch&gt; LIKE LINE OF fm_data-changing_p,
    &lt;ex&gt; LIKE LINE OF fm_data-export_p,
    &lt;pa&gt; LIKE LINE OF parameters,
    &lt;pt&gt; LIKE LINE OF fm_data-param_texts,
    &lt;cx&gt; LIKE LINE OF fm_data-exceptions,
    &lt;ta&gt; LIKE LINE OF fm_data-tables.

  MOVE-CORRESPONDING fm_data-header TO a0_maindata.
  _code_signature = fm_data-code_signature.

*  d_doc = zaplink_function_group=&gt;get_mainprogram( fm_data-header-area ).
*  t_docs = fm_data-docs.
*  READ TABLE t_docs ASSIGNING &lt;d&gt;
*       WITH KEY id = doc_ids-group
*            object = d_doc.
*  LOOP AT fm_data-texts ASSIGNING &lt;t&gt;.
*    CLEAR s_txt.    s_txt-langu = &lt;t&gt;-spras.   s_txt-short_txt = &lt;t&gt;-areat.
*    IF &lt;d&gt; IS ASSIGNED.
*      READ TABLE &lt;d&gt;-texts ASSIGNING &lt;dt&gt;
*          WITH KEY tdspras = s_txt-langu.
*      IF sy-subrc = 0.    s_txt-long_txt = &lt;dt&gt;.   CLEAR s_txt-long_txt-tdspras.    DELETE TABLE &lt;d&gt;-texts FROM &lt;dt&gt;.    ENDIF.
*    ENDIF.
*    INSERT s_txt INTO TABLE a0_maindata-texts.
*  ENDLOOP.
*  IF &lt;d&gt; IS ASSIGNED.
*    LOOP AT &lt;d&gt;-texts ASSIGNING &lt;dt&gt;.
*      CLEAR s_txt.    s_txt-langu = &lt;dt&gt;-tdspras.   s_txt-long_txt = &lt;dt&gt;.   CLEAR s_txt-long_txt-tdspras.    INSERT s_txt INTO TABLE a0_maindata-texts.
*    ENDLOOP.
*  ENDIF.

* Source code : remove FUNCTION XXX &amp; ENDFUNCTION.
  IF NOT fm_data-source IS INITIAL.
    t_abapsrc = fm_data-source.
    READ TABLE t_abapsrc ASSIGNING &lt;s&gt; INDEX 1.
    TRANSLATE &lt;s&gt; TO UPPER CASE.                          &quot;#EC SYNTCHAR
    IF &lt;s&gt; CP &apos;FUNCTION *.&apos;.    DELETE t_abapsrc INDEX 1.   ENDIF.
    d_lcount = LINES( t_abapsrc ).
    READ TABLE t_abapsrc ASSIGNING &lt;s&gt; INDEX d_lcount.
    TRANSLATE &lt;s&gt; TO UPPER CASE.                          &quot;#EC SYNTCHAR
    IF &lt;s&gt; CP &apos;ENDFUNCTION*.&apos;.    DELETE t_abapsrc INDEX d_lcount.   ENDIF.
    source-_ = zaplink_function_group=&gt;conv_abap_raw2source( t_abapsrc ).
  ENDIF.

  UNASSIGN &lt;d&gt;.
  READ TABLE t_docs ASSIGNING &lt;d&gt;
       WITH KEY id = doc_ids-function
            object = a0_maindata-name.
  LOOP AT fm_data-texts ASSIGNING &lt;t&gt;
          WHERE funcname = a0_maindata-name.
    CLEAR s_txt.    s_txt-langu = &lt;t&gt;-spras.   s_txt-short_txt = &lt;t&gt;-stext.
    IF &lt;d&gt; IS ASSIGNED.
      READ TABLE &lt;d&gt;-texts ASSIGNING &lt;dt&gt;
          WITH KEY tdspras = s_txt-langu.
      IF sy-subrc = 0.    s_txt-long_txt = &lt;dt&gt;.   CLEAR s_txt-long_txt-tdspras.    DELETE TABLE &lt;d&gt;-texts FROM &lt;dt&gt;.   ENDIF.
    ENDIF.
    INSERT s_txt INTO TABLE texts.
  ENDLOOP.
  IF &lt;d&gt; IS ASSIGNED.
    LOOP AT &lt;d&gt;-texts ASSIGNING &lt;dt&gt;.
      CLEAR s_txt.    s_txt-langu = &lt;dt&gt;-tdspras.   s_txt-long_txt = &lt;dt&gt;.   CLEAR s_txt-long_txt-tdspras.    INSERT s_txt INTO TABLE texts.
    ENDLOOP.
  ENDIF.

  LOOP AT fm_data-import_p ASSIGNING &lt;im&gt;.
    CLEAR s_param.    s_param-hdr = &lt;im&gt;.    s_param-kind = parameter_kinds-importing.   INSERT s_param INTO TABLE parameters.
  ENDLOOP.
  LOOP AT fm_data-changing_p ASSIGNING &lt;ch&gt;.
    CLEAR s_param.    s_param-hdr = &lt;ch&gt;.    s_param-kind = parameter_kinds-changing.   INSERT s_param INTO TABLE parameters.
  ENDLOOP.
  LOOP AT fm_data-export_p ASSIGNING &lt;ex&gt;.
    CLEAR s_param.    MOVE-CORRESPONDING &lt;ex&gt; TO s_param-hdr.    s_param-kind = parameter_kinds-exporting.   INSERT s_param INTO TABLE parameters.
  ENDLOOP.
  LOOP AT fm_data-tables ASSIGNING &lt;ta&gt;.
    CLEAR s_param.    MOVE-CORRESPONDING &lt;ta&gt; TO s_param-hdr.    s_param-dbfield = &lt;ta&gt;-dbstruct.   s_param-kind = parameter_kinds-table.   INSERT s_param INTO TABLE parameters.
  ENDLOOP.
  d_doc_p-func = a0_maindata-name.
  LOOP AT parameters ASSIGNING &lt;pa&gt;.
    d_doc_p-param = &lt;pa&gt;-parameter.   UNASSIGN &lt;d&gt;.
    READ TABLE t_docs ASSIGNING &lt;d&gt;
         WITH KEY id = doc_ids-function
              object = d_doc_p.
    LOOP AT fm_data-param_texts ASSIGNING &lt;pt&gt;
         WHERE funcname = a0_maindata-name
           AND parameter = &lt;pa&gt;-parameter
           AND kind = &apos;P&apos;.
      CLEAR s_txt.    s_txt-langu = &lt;pt&gt;-spras.   s_txt-short_txt = &lt;pt&gt;-stext.
      IF &lt;d&gt; IS ASSIGNED.
        READ TABLE &lt;d&gt;-texts ASSIGNING &lt;dt&gt;
            WITH KEY tdspras = s_txt-langu.
        IF sy-subrc = 0.    s_txt-long_txt = &lt;dt&gt;.   CLEAR s_txt-long_txt-tdspras.    DELETE TABLE &lt;d&gt;-texts FROM &lt;dt&gt;.   ENDIF.
      ENDIF.
      INSERT s_txt INTO TABLE &lt;pa&gt;-texts.
    ENDLOOP.
    IF &lt;d&gt; IS ASSIGNED.
      LOOP AT &lt;d&gt;-texts ASSIGNING &lt;dt&gt;.
        CLEAR s_txt.    s_txt-langu = &lt;dt&gt;-tdspras.   s_txt-long_txt = &lt;dt&gt;.   CLEAR s_txt-long_txt-tdspras.    INSERT s_txt INTO TABLE &lt;pa&gt;-texts.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  LOOP AT fm_data-exceptions ASSIGNING &lt;cx&gt;.
    CLEAR s_excep.    s_excep-hdr = &lt;cx&gt;.
    LOOP AT fm_data-param_texts ASSIGNING &lt;pt&gt;
         WHERE funcname = a0_maindata-name
           AND parameter = &lt;cx&gt;-exception
           AND kind = &apos;X&apos;.
      CLEAR s_txt.    s_txt-langu = &lt;pt&gt;-spras.   s_txt-short_txt = &lt;pt&gt;-stext.    INSERT s_txt INTO TABLE s_excep-texts.
    ENDLOOP.
    INSERT s_excep INTO TABLE exceptions.
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="TO_DATA" EXPOSURE="1" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Convert object attributes to FM Data"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="FM_DATA" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TS_FM_DATA">
      <TEXTS>
       <ITEM LANG="E" TEXT="Function Modules object Data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA s_line    LIKE LINE OF fm_data-source.
  DATA s_txt     LIKE LINE OF fm_data-texts.
  DATA s_f_txt   LIKE LINE OF fm_data-texts.
  DATA s_p_im    LIKE LINE OF fm_data-import_p.
  DATA s_p_ch    LIKE LINE OF fm_data-changing_p.
  DATA s_p_ex    LIKE LINE OF fm_data-export_p.
  DATA s_p_ta    LIKE LINE OF fm_data-tables.
  DATA s_p_txt   LIKE LINE OF fm_data-param_texts.
  DATA s_excep   LIKE LINE OF fm_data-exceptions.
  DATA d_suffix  TYPE rs38l-suffix.
  DATA d_group   TYPE rs38l-area.
*  DATA s_inc     LIKE LINE OF fm_data-includes.
  DATA d_search  TYPE string.
  DATA d_replace TYPE string.
  DATA d_lcount  TYPE i.
  DATA s_doc     LIKE LINE OF fm_data-docs.
  DATA s_doc_txt LIKE LINE OF s_doc-texts.
  DATA d_doc_p   TYPE ts_doc_param.
  FIELD-SYMBOLS:
*    &lt;t&gt;  LIKE LINE OF a0_maindata-texts,
*    &lt;i&gt;  LIKE LINE OF includes,
*    &lt;f&gt;  LIKE LINE OF functions,
    &lt;ft&gt; LIKE LINE OF texts,
    &lt;s&gt;  LIKE LINE OF fm_data-source,
    &lt;pa&gt; LIKE LINE OF parameters,
    &lt;pt&gt; LIKE LINE OF &lt;pa&gt;-texts,
    &lt;cx&gt; LIKE LINE OF exceptions.


  MOVE-CORRESPONDING a0_maindata TO fm_data-header.
* Source code : remove FUNCTION XXX &amp; ENDFUNCTION.
  IF NOT source-_ IS INITIAL.
    fm_data-source = zaplink_function_group=&gt;conv_abap_source2raw( source-_ ).
    READ TABLE fm_data-source ASSIGNING &lt;s&gt; INDEX 1.   TRANSLATE &lt;s&gt; TO UPPER CASE. &quot;#EC SYNTCHAR
    IF NOT &lt;s&gt; CP &apos;FUNCTION *.&apos;.    CONCATENATE `FUNCTION ` A0_maindata-name &apos;.&apos; INTO s_line.   INSERT s_line INTO fm_data-source INDEX 1.   ENDIF.
    d_lcount = LINES( fm_data-source ).    READ TABLE fm_data-source ASSIGNING &lt;s&gt; INDEX d_lcount.    TRANSLATE &lt;s&gt; TO UPPER CASE. &quot;#EC SYNTCHAR
    IF NOT &lt;s&gt; CP &apos;ENDFUNCTION*.&apos;.    APPEND &apos;ENDFUNCTION.&apos; TO fm_data-source.   ENDIF.
  ENDIF.

*APPLICATION                                      DOKU
*ID                                      FU
*OBJECT                                      xxxxx
*LANGU                                      F
*MASTERLANG                                      X
*TYP                                      T
*DOKFORM                                      S_DOCU_SHOW
*DOKSTYLE                                      S_DOCUS1
  CLEAR s_doc.    s_doc-application = &apos;DOKU&apos;.   s_doc-id = doc_ids-function.   s_doc-object = A0_maindata-name.
  s_doc-masterlang = abap_true.   s_doc-typ = &apos;T&apos;.    s_doc-dokform = &apos;S_DOCU_SHOW&apos;.    s_doc-dokstyle = &apos;S_DOCUS1&apos;.
  LOOP AT texts ASSIGNING &lt;ft&gt;.
    IF NOT &lt;ft&gt;-short_txt IS INITIAL.    CLEAR s_f_txt.    s_f_txt-spras = &lt;ft&gt;-langu.   s_f_txt-stext = &lt;ft&gt;-short_txt.   s_f_txt-funcname = A0_maindata-name.   INSERT s_f_txt INTO TABLE fm_data-texts.    ENDIF.
    IF NOT &lt;ft&gt;-long_txt IS INITIAL.
      CLEAR s_doc_txt.    s_doc_txt = &lt;ft&gt;-long_txt.   s_doc_txt-tdspras = &lt;ft&gt;-langu.    INSERT s_doc_txt INTO TABLE s_doc-texts.
      IF s_doc-langu IS INITIAL.    s_doc-langu = s_doc_txt-tdspras.    ENDIF.
    ENDIF.
  ENDLOOP.
  IF NOT s_doc-texts IS INITIAL.    INSERT s_doc INTO TABLE fm_data-docs.   ENDIF.

  LOOP AT parameters ASSIGNING &lt;pa&gt;.
    CASE &lt;pa&gt;-kind.
      WHEN parameter_kinds-importing.
        CLEAR s_p_im.   s_p_im = &lt;pa&gt;-hdr.    INSERT s_p_im INTO TABLE fm_data-import_p.
      WHEN parameter_kinds-changing.
        CLEAR s_p_ch.   s_p_ch = &lt;pa&gt;-hdr.    INSERT s_p_ch INTO TABLE fm_data-changing_p.
      WHEN parameter_kinds-exporting.
        CLEAR s_p_ex.   MOVE-CORRESPONDING &lt;pa&gt;-hdr TO s_p_ex.    INSERT s_p_ex INTO TABLE fm_data-export_p.
      WHEN parameter_kinds-table.
        CLEAR s_p_ta.   MOVE-CORRESPONDING &lt;pa&gt;-hdr TO s_p_ta.    s_p_ta-dbstruct = &lt;pa&gt;-dbfield.    INSERT s_p_ta INTO TABLE fm_data-tables.
      WHEN OTHERS.
    ENDCASE.
*APPLICATION                                      DOKU
*ID                                      FU
*OBJECT                                      xxxxx yyy
*LANGU                                      F
*MASTERLANG                                      X
*TYP                                      T
*DOKFORM                                      S_DOCU_SHOW
*DOKSTYLE                                      S_DOCUS1
    CLEAR: d_doc_p, s_doc.    d_doc_p-func = A0_maindata-name.    d_doc_p-param = &lt;pa&gt;-parameter.    s_doc-application = &apos;DOKU&apos;.   s_doc-id = doc_ids-function.
    s_doc-object = d_doc_p.   s_doc-masterlang = abap_true.   s_doc-typ = &apos;T&apos;.    s_doc-dokform = &apos;S_DOCU_SHOW&apos;.    s_doc-dokstyle = &apos;S_DOCUS1&apos;.
    LOOP AT &lt;pa&gt;-texts ASSIGNING &lt;pt&gt;.
      IF NOT &lt;pt&gt;-short_txt IS INITIAL.
        CLEAR s_p_txt. s_p_txt-spras = &lt;pt&gt;-langu. s_f_txt-stext = &lt;pt&gt;-short_txt. s_p_txt-funcname = A0_maindata-name. s_p_txt-parameter = &lt;pa&gt;-parameter. s_p_txt-kind = &apos;P&apos;. INSERT s_p_txt INTO TABLE fm_data-param_texts.
      ENDIF.
      IF NOT &lt;pt&gt;-long_txt IS INITIAL.
        CLEAR s_doc_txt.    s_doc_txt = &lt;pt&gt;-long_txt.   s_doc_txt-tdspras = &lt;pt&gt;-langu.    INSERT s_doc_txt INTO TABLE s_doc-texts.
        IF s_doc-langu IS INITIAL.    s_doc-langu = s_doc_txt-tdspras.    ENDIF.
      ENDIF.
    ENDLOOP.
    IF NOT s_doc-texts IS INITIAL.    INSERT s_doc INTO TABLE fm_data-docs.   ENDIF.
  ENDLOOP.

  LOOP AT exceptions ASSIGNING &lt;cx&gt;.
    CLEAR s_excep.    s_excep = &lt;cx&gt;-hdr.

    LOOP AT &lt;cx&gt;-texts ASSIGNING &lt;pt&gt;.
      CLEAR s_p_txt.    s_p_txt-spras = &lt;pt&gt;-langu.   s_f_txt-stext = &lt;pt&gt;-short_txt.   s_p_txt-funcname = A0_maindata-name.    s_p_txt-parameter = &lt;cx&gt;-exception.   s_p_txt-kind = &apos;X&apos;.    INSERT s_p_txt INTO TABLE fm_data-param_texts.
    ENDLOOP.
    INSERT s_excep INTO TABLE fm_data-exceptions.
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="UNANONYMIZE" EXPOSURE="1" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="UnAnonymized component data"/>
    </TEXTS>
   </ITEM>
  </METHODS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" IMPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TD_INCLUDENAME" EXPOSURE="1" STATE="1" EDITORDER="13 " TYPTYPE="1" TYPE="D010INC-INCLUDE"/>
   <ITEM CMPNAME="TD_PARAMKIND" EXPOSURE="1" STATE="1" EDITORDER="22 " TYPTYPE="1" TYPE="KIND"/>
   <ITEM CMPNAME="TO_MENUPAINTER" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_MENUPAINTER_DATA">
    <TEXTS>
     <ITEM LANG="E" TEXT="Menu painter Data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_DOC_PARAM" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="4">BEGIN OF ts_doc_param,
      func 	TYPE rs38l_fnam,
      param TYPE rs38l_par_,
    END OF ts_doc_param
`</ITEM>
   <ITEM CMPNAME="TS_EXCEP" EXPOSURE="1" STATE="1" EDITORDER="25 " TYPTYPE="4">BEGIN OF ts_excep.
  INCLUDE TYPE rsexc AS hdr.
  TYPES:
      texts       TYPE tt_texts,
    END OF ts_excep
`</ITEM>
   <ITEM CMPNAME="TS_FM_DATA" EXPOSURE="1" STATE="1" EDITORDER="18 " TYPTYPE="4">
    BEGIN OF ts_fm_data,
* DO pour type doc
                header          TYPE rs38l,
                code_signature  TYPE td_checksum,
                docs            TYPE tt_docs,
                import_p        TYPE tt_rsimp,
                changing_p      TYPE tt_rscha,
                export_p        TYPE tt_rsexp,
                tables          TYPE tt_rstbl,
                exceptions      TYPE tt_rsexc,
                source          TYPE tt_abaprawsource,
                texts           TYPE tt_tftit,
                param_texts     TYPE tt_funct,
              END OF ts_fm_data
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Function Module Data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_FUNCTION" EXPOSURE="1" STATE="1" EDITORDER="27 " TYPTYPE="4">BEGIN OF ts_function,
      name        TYPE rs38l-name,
      global      TYPE rs38l-global,
      remote      TYPE rs38l-remote,
      utask       TYPE rs38l-utask,
      texts       TYPE tt_texts,
      parameters  TYPE tt_params,
      exceptions  TYPE tt_exceptions,
      source      TYPE ts_source,
    END OF ts_function
`</ITEM>
   <ITEM CMPNAME="TS_INCLUDE" EXPOSURE="1" STATE="1" EDITORDER="14 " TYPTYPE="4">BEGIN OF ts_include,
      name   TYPE td_includename,
      source TYPE ts_source,
    END OF ts_include
`</ITEM>
   <ITEM CMPNAME="TS_MAINDATA" EXPOSURE="1" STATE="1" EDITORDER="19 " TYPTYPE="4">
    BEGIN OF ts_maindata,
      name        TYPE rs38l-name,
      global      TYPE rs38l-global,
      remote      TYPE rs38l-remote,
      utask       TYPE rs38l-utask,
      str_area    TYPE rs38l-str_area,
    END OF ts_maindata
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Function Module main data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_PARAM" EXPOSURE="1" STATE="1" EDITORDER="23 " TYPTYPE="4">BEGIN OF ts_param,
      kind TYPE td_paramkind.
  INCLUDE TYPE rsimp AS hdr.
  TYPES:
      texts       TYPE tt_texts,
    END OF ts_param
`</ITEM>
   <ITEM CMPNAME="TS_RAWINCLUDE" EXPOSURE="1" STATE="1" EDITORDER="16 " TYPTYPE="4">BEGIN OF ts_rawinclude,
      name   TYPE td_includename,
      source TYPE tt_abaprawsource,
    END OF ts_rawinclude
`</ITEM>
   <ITEM CMPNAME="TS_SOURCE" EXPOSURE="1" STATE="1" EDITORDER="12 " TYPTYPE="4">
    BEGIN OF ts_source,
            _ TYPE string,
          END OF ts_source
`
    <TEXTS>
     <ITEM LANG="E" TEXT="ABAP Source code"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_TEXTPOOL" EXPOSURE="1" STATE="1" EDITORDER="20 " TYPTYPE="4">
    BEGIN OF ts_textpool,
          id    TYPE  textpoolid,
          key	  TYPE  textpoolky,
          texts TYPE  tt_texts,
        END OF ts_textpool
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Textpool"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_EXCEPTIONS" EXPOSURE="1" STATE="1" EDITORDER="26 " TYPTYPE="4">tt_exceptions TYPE SORTED TABLE OF ts_excep WITH UNIQUE KEY exception
`</ITEM>
   <ITEM CMPNAME="TT_FUNCT" EXPOSURE="1" STATE="1" EDITORDER="6 " TYPTYPE="4">tt_funct TYPE SORTED TABLE OF funct WITH UNIQUE KEY funcname parameter kind spras
`</ITEM>
   <ITEM CMPNAME="TT_FUNCTIONS" EXPOSURE="1" STATE="1" EDITORDER="28 " TYPTYPE="4">tt_functions TYPE SORTED TABLE OF ts_function WITH UNIQUE KEY name
`</ITEM>
   <ITEM CMPNAME="TT_INCLUDES" EXPOSURE="1" STATE="1" EDITORDER="15 " TYPTYPE="4">tt_includes TYPE SORTED TABLE OF ts_include WITH UNIQUE KEY name
`</ITEM>
   <ITEM CMPNAME="TT_PARAMS" EXPOSURE="1" STATE="1" EDITORDER="24 " TYPTYPE="4">tt_params TYPE SORTED TABLE OF ts_param WITH UNIQUE KEY parameter
`</ITEM>
   <ITEM CMPNAME="TT_RAWINCLUDES" EXPOSURE="1" STATE="1" EDITORDER="17 " TYPTYPE="4">tt_rawincludes TYPE STANDARD TABLE OF ts_rawinclude WITH NON-UNIQUE KEY name
`</ITEM>
   <ITEM CMPNAME="TT_RSCHA" EXPOSURE="1" STATE="1" EDITORDER="8 " TYPTYPE="4">tt_rscha TYPE STANDARD TABLE OF rscha WITH DEFAULT KEY
`</ITEM>
   <ITEM CMPNAME="TT_RSEXC" EXPOSURE="1" STATE="1" EDITORDER="11 " TYPTYPE="4">tt_rsexc TYPE STANDARD TABLE OF rsexc WITH DEFAULT KEY
`</ITEM>
   <ITEM CMPNAME="TT_RSEXP" EXPOSURE="1" STATE="1" EDITORDER="9 " TYPTYPE="4">tt_rsexp TYPE STANDARD TABLE OF rsexp WITH DEFAULT KEY
`</ITEM>
   <ITEM CMPNAME="TT_RSIMP" EXPOSURE="1" STATE="1" EDITORDER="7 " TYPTYPE="4">tt_rsimp TYPE STANDARD TABLE OF rsimp WITH DEFAULT KEY
`</ITEM>
   <ITEM CMPNAME="TT_RSTBL" EXPOSURE="1" STATE="1" EDITORDER="10 " TYPTYPE="4">tt_rstbl TYPE STANDARD TABLE OF rstbl WITH DEFAULT KEY
`</ITEM>
   <ITEM CMPNAME="TT_TEXTPOOLS" EXPOSURE="1" STATE="1" EDITORDER="21 " TYPTYPE="4">
    tt_textpools TYPE SORTED TABLE OF ts_textpool WITH UNIQUE KEY id KEY
`
    <TEXTS>
     <ITEM LANG="E" TEXT="Textpool table"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_TFTIT" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4">tt_tftit TYPE SORTED TABLE OF tftit WITH UNIQUE KEY funcname spras
`</ITEM>
   <ITEM CMPNAME="TT_TLIBT" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="4">tt_tlibt TYPE SORTED TABLE OF tlibt WITH UNIQUE KEY spras
`</ITEM>
   <ITEM CMPNAME="T_RAW" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="RSWSOURCET">
    <TEXTS>
     <ITEM LANG="E" TEXT="ABAP Source table"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>

<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="89A857F40355536E874A098213A265B5" CODE_SIGNATURE="82C2338D9FD7B86B8FA4BD1A2D04FD08" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_CONTAINER" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-CORE" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X" MSG_ID="ZAPLINK">
   <INHERITANCE REFCLSNAME="ZAPLINK_CONTAINER_4INST" STATE="1"/>
   <TEXTS>
    <ITEM LANG="E" TEXT="ZapLink Container :  To store SAP component in XML">U1&amp;FUNCTIONALITY&amp;
ASThis object represent the container (the XML file) and allow to handle
  container actions such as :
AS,,- Loading &amp; saving
AS,,- Import &amp; export
AS,,- Adding &amp; removing component
U1&amp;RELATIONS&amp;
AS
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AS
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="DATA" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TS_CONTDATA_FULL">
    <TEXTS>
     <ITEM LANG="E" TEXT="Full container data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_CX" STATE="1" ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_ROOT_EXCEPTION">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_MYCX" STATE="1" ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_EXCEPTION">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink Exception for Component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="VERSION" EXPOSURE="2" STATE="1" ATTDECLTYP="2" ATTVALUE="&apos;1.0&apos;" TYPTYPE="1" TYPE="TD_CONTVER">
    <TEXTS>
     <ITEM LANG="E" TEXT="Version"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE zaplink_macros.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="ADD_COMPONENTS" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Add SAP Comoponents to Container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJECT_LIST" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_comp    TYPE zaplink_list=&gt;to_component.
  DATA msg       TYPE string.
  DATA _msg_col  TYPE to_log.

  CHECK object_list IS BOUND.
  TRY.
* Initialize Interator
    object_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
    object_list-&gt;init_sel_iter( ).
    object_list-&gt;display_progress = abap_true.
    o_comp = object_list-&gt;get_next( ).

    WHILE o_comp IS BOUND.
      TRY.
          _add_component( component = o_comp ).
        CATCH ZCX_ZL_CONTAINER INTO o_mycx.
          CALL METHOD log-&gt;add_exception
            EXPORTING
              exception    = o_mycx
*                id_detlevel  =
              id_probclass = log-&gt;probcl-medium.
          _msg_col = o_comp-&gt;get_msg_coll( ).
          IF _msg_col IS BOUND.
            CALL METHOD log-&gt;add_from_instance
              EXPORTING
                io_msglist        = _msg_col
                if_add_as_subnode = abap_true
*                if_cumulate       =
                .
          ENDIF.
      ENDTRY.

      o_comp = object_list-&gt;get_next( ).
    ENDWHILE.

    _complist-&gt;refresh( ).    &quot; Issue 102
    compact( ).
    _update_componentslist( ).

    mac_def_catch ZCX_ZL_CONTAINER.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
xmlengine = cl_ixml=&gt;create( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="COMPACT" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Compact container : remove component already included as sub"/>
    </TEXTS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_list TYPE to_list.
  DATA o_comp TYPE to_component.
  DATA o_subcomps TYPE to_list.

  TRY.
      _complist-&gt;init_iter( ).
      _complist-&gt;display_progress = abap_false.
      o_comp = _complist-&gt;get_next( ).
      WHILE o_comp IS BOUND.
        o_list = _complist-&gt;clone( ).
        o_list-&gt;remove( o_comp ).
        o_subcomps = o_comp-&gt;get_subcomponents( ).
        IF o_subcomps IS NOT BOUND.
          CREATE OBJECT o_subcomps.
        else.
          o_subcomps = o_subcomps-&gt;clone( ).    &quot; Issue 49 : DO not use list itself because generate nested loop
        ENDIF.
        o_subcomps-&gt;add( o_comp ).
        IF o_list-&gt;is_included( o_subcomps ) = abap_true.
* components o_comp and it&apos;s subcomponents do exists as sub components of an other components (like DEVC)
          _remove_component( o_comp ).
        ENDIF.
        o_comp = _complist-&gt;get_next( ).
      ENDWHILE.
    CATCH zcx_zaplink INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CREATE_NEW" EXPOSURE="2" STATE="1" MTDDECLTYP="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Create a new Container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TS_CONTDATA">
      <TEXTS>
       <ITEM LANG="E" TEXT="Full Container data"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_FILE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_FILE">
      <TEXTS>
       <ITEM LANG="E" TEXT="File Manager"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="3" TYPE="ZAPLINK_CONTAINER">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPLINK Container : To store SAP component in XML"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  CHECK NOT data-name IS INITIAL.
  CREATE OBJECT result
    EXPORTING
      o_file = o_file.
  result-&gt;data-public = data.
  result-&gt;data-version = version.
  result-&gt;data-class = zaplink_tools=&gt;get_clas_name( result ).
  result-&gt;_update_header( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="REMOVE_COMPONENTS" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Remove SAP Components from Container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJECT_LIST" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_comp    TYPE zaplink_list=&gt;to_component.

  CHECK object_list IS BOUND.
  TRY.
      object_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
      object_list-&gt;init_sel_iter( ).
      object_list-&gt;display_progress = abap_true.

      o_comp = object_list-&gt;get_next( ).
      WHILE o_comp IS BOUND.
        TRY.
            _remove_component( o_comp ).
          CATCH ZCX_ZL_CONNECTOR.
            &quot; Ignore errors
        ENDTRY.

        o_comp = object_list-&gt;get_next( ).
      ENDWHILE.
    CATCH zcx_zaplink INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SAVE_TO_FILE" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Export container to XML"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="O_FILE" CMPTYPE="1" TYPTYPE="1" TYPE="TO_FILE" PAROPTIONL="X">
      <TEXTS>
       <ITEM LANG="E" TEXT="File Manager"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _streamfactory TYPE REF TO if_ixml_stream_factory.
  DATA _outputstream  TYPE REF TO if_ixml_ostream.
  DATA _renderer      TYPE REF TO if_ixml_renderer.
  DATA _tempstring    TYPE string.
  DATA _printxmldoc   TYPE REF TO cl_xml_document.
  DATA _rc            TYPE sysubrc.
  DATA _file          TYPE to_file.
  DATA go_encoding    TYPE REF TO if_ixml_encoding.

  IF NOT xmldata IS BOUND.
    EXIT.
  ENDIF.

  _streamfactory = xmlengine-&gt;create_stream_factory( ).
  _outputstream = _streamfactory-&gt;create_ostream_cstring( _tempstring ).
  go_encoding = _outputstream-&gt;get_encoding( ).
  go_encoding-&gt;set_character_set( &apos;utf-8&apos; ).    &quot; issue 136
  _update_header( ).
  _renderer = xmlengine-&gt;create_renderer( document = xmldata
                                           ostream = _outputstream ).
  _renderer-&gt;set_normalizing( ).
  _rc = _renderer-&gt;render( ).
  CREATE OBJECT _printxmldoc.
  _rc = _printxmldoc-&gt;parse_string( _tempstring ).

  WHILE _tempstring(1) &lt;&gt; &apos;&lt;&apos;.
    SHIFT _tempstring LEFT BY 1 PLACES.
  ENDWHILE.

  IF o_file IS BOUND.
    _file = o_file.
  ELSE.
    _file = file.
  ENDIF.
  TRY.
      _file-&gt;set_filecontent( _tempstring ).
      _file-&gt;save( ).
    CATCH zcx_zl_file.
      RETURN.
  ENDTRY.
  file = _file.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_ADD_COMPONENT" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Add a SAP Component to the Container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANG="E" TEXT="Line object"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_connector TYPE zaplink_component=&gt;to_connector.
  DATA root      TYPE REF TO if_ixml_element.
  DATA _base     TYPE REF TO if_ixml_node.
  DATA rval      TYPE i.
  DATA _comp     TYPE zaplink_component=&gt;ts_component.
  DATA object    TYPE to_xml.
  DATA _index    LIKE LINE OF _nodeindex.
  DATA o_cx_cnx  TYPE REF TO ZCX_ZL_CONNECTOR.
*  DATA o_cx_comp TYPE REF TO ZCX_ZAPLINK_component.
*  DATA o_cx_list TYPE REF TO ZCX_ZL_LIST.

  CHECK component IS BOUND.
  TRY.
      _comp = component-&gt;get_key( ).
      o_connector = component-&gt;connector( ).
    CATCH ZCX_ZAPLINK INTO o_cx.
      TRY.
          component-&gt;set_exception( o_cx ).
        CATCH ZCX_ZAPLINK INTO o_cx.
          mac_cascade_raise o_mycx o_cx.
      ENDTRY.
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
      RAISE EXCEPTION TYPE ZCX_ZL_CONTAINER
                 EXPORTING textid = ZCX_ZL_CONTAINER=&gt;add_comp_failed
                             type = _comp-type
                             name = _comp-name.
  ENDTRY.

  ASSERT o_connector IS BOUND.

* Extract Component
  TRY.
      o_connector-&gt;options = _options.
      object = o_connector-&gt;export_from_sap( component ).
      component-&gt;set_msg_coll( o_connector-&gt;application_log ).
      mac_add_log o_connector-&gt;application_log log &apos;W&apos;.
    CATCH ZCX_ZL_CONNECTOR INTO o_cx_cnx.
      TRY.
          component-&gt;set_exception( o_cx_cnx ).
          component-&gt;set_msg_coll( o_connector-&gt;application_log ).
        CATCH ZCX_ZAPLINK INTO o_cx.
          mac_cascade_raise o_mycx o_cx.
      ENDTRY.
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
      RAISE EXCEPTION TYPE ZCX_ZL_CONTAINER
                 EXPORTING textid = ZCX_ZL_CONTAINER=&gt;add_comp_failed
                         previous = o_cx_cnx
                             type = _comp-type
                             name = _comp-name.
    CATCH ZCX_ZAPLINK INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.

  IF NOT object IS BOUND.
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
    RAISE EXCEPTION TYPE ZCX_ZL_CONTAINER
               EXPORTING textid = ZCX_ZL_CONTAINER=&gt;add_comp_failed
                           type = _comp-type
                           name = _comp-name.

  ENDIF.

  TRY.
      root = object-&gt;get_root_element( ).
      _base = get_root( ). &quot; xmldata

      CHECK root IS BOUND.
      _remove_component( component ).
      rval = _base-&gt;append_child( root ).
      IF rval &lt;&gt; 0.
* error handling
        EXIT.
      ENDIF.

* Issue 102 : Replaced code
*      TRY.
*          _complist-&gt;add( component ).
*        CATCH ZCX_ZL_LIST INTO o_cx_list.
*          TRY.
*              component-&gt;set_exception( o_cx_list ).
*            CATCH ZCX_ZAPLINK INTO o_cx.
*              mac_cascade_raise o_mycx o_cx.
*          ENDTRY.
** Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
*          RAISE EXCEPTION TYPE ZCX_ZL_CONTAINER
*                     EXPORTING textid = ZCX_ZL_CONTAINER=&gt;add_comp_failed
*                                 type = _comp-type
*                                 name = _comp-name.
*      ENDTRY.
*
*      _index-key = component.
**      _index-node = _find_component_node( component ).       &quot; Find_component is based on node_index it can&apos;t be used to get node.
*      _index-node = root.
*      MODIFY TABLE _nodeindex FROM _index.
*      IF sy-subrc &lt;&gt; 0.
*        INSERT _index INTO TABLE _nodeindex.
*      ENDIF.

      _search_components( root ).     &quot; Issue 102 : to keep comp list up to date

    CATCH ZCX_ZL_CONTAINER INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_REMOVE_COMPONENT" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Remove a SAP Component from the Container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA node   TYPE REF TO if_ixml_node.
  DATA o_comp TYPE to_component.

  TRY.
    node = _find_component_node( component ).
    WHILE node IS BOUND.
      node-&gt;remove_node( ).
      IF sy-subrc = 0.
        DELETE _nodeindex WHERE node = node.
        o_comp = _complist-&gt;search( component ).
        IF o_comp IS BOUND.
          DELETE _nodeindex WHERE key = o_comp.
        ELSE. &quot; for security
          DELETE _nodeindex WHERE key = component.
        ENDIF.
        _complist-&gt;remove( component ).
      ENDIF.
      node = _find_component_node( component ).
    ENDWHILE.

    mac_def_catch ZCX_ZL_CONTAINER.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_UPDATE_HEADER" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Update Header into XML Data"/>
    </TEXTS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _root TYPE REF TO if_ixml_element.
  DATA _ezxml TYPE REF TO zaplink_easyxml.

  _root = xmldata-&gt;get_root_element( ).

  IF NOT _root IS BOUND.
    _root = xmldata-&gt;create_element( name = tn_container_root ).
    xmldata-&gt;if_ixml_node~append_child( _root ).
  ENDIF.

  CREATE OBJECT _ezxml.
  _ezxml-&gt;add_any( EXPORTING xml_node = _root
                                  any = data
*                                  name = tn_container_root
                               xmldoc = xmldata ).</SOURCE>
   </ITEM>
  </METHODS>
  <TYPES>
   <ITEM CMPNAME="TS_CONTDATA_FULL" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="4">BEGIN OF ts_contdata_full.
  INCLUDE TYPE ts_contdata AS public.
  TYPES:
      version  TYPE td_contver,
      class    TYPE td_connclass,
    END OF ts_contdata_full
`</ITEM>
   <ITEM CMPNAME="T_XML" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="STRING">
    <TEXTS>
     <ITEM LANG="E" TEXT="XML data"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>

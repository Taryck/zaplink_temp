<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="AB0B1A61BBE5EE718DBE94CBB29E295E" CODE_SIGNATURE="50C5601A0E9EC32A36E9AF8A2118FF9D" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_CONTAINER_4INST" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-CORE" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X" MSG_ID="ZAPLINK">
   <TEXTS>
    <ITEM LANG="E" TEXT="ZapLink Container : For install purpose">U1&amp;FUNCTIONALITY&amp;
ASFor internal use. Use ZAPLINK_CONTAINER instead.
ASThis object is use by ZAPLink installer only to reduce container
  functionality only to :
AS,,- Load &amp; Import
AS,,- Load &amp; Uninstall
U1&amp;RELATIONS&amp;
AS
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AS
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="BALLOG_OBJECT" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="BALLOG_OBJECT"/>
   <ITEM CMPNAME="COMP_NODENAME" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="COMP_NODENAME"/>
   <ITEM CMPNAME="EXISTS" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="EXISTS"/>
   <ITEM CMPNAME="LINE_SEPARATOR" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="LINE_SEPARATOR"/>
   <ITEM CMPNAME="TD_ABAPSOURCE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ABAPSOURCE"/>
   <ITEM CMPNAME="TD_ACTION" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ACTION"/>
   <ITEM CMPNAME="TD_CHECKSUM" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CHECKSUM"/>
   <ITEM CMPNAME="TD_CLASSNAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CLASSNAME"/>
   <ITEM CMPNAME="TD_COMPEXISTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPEXISTS"/>
   <ITEM CMPNAME="TD_COMPNAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPNAME"/>
   <ITEM CMPNAME="TD_COMPTEXT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPTEXT"/>
   <ITEM CMPNAME="TD_COMPTYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPTYPE"/>
   <ITEM CMPNAME="TD_CONNCLASS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNCLASS"/>
   <ITEM CMPNAME="TD_CONNEXISTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNEXISTS"/>
   <ITEM CMPNAME="TD_CONNUUID" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNUUID"/>
   <ITEM CMPNAME="TD_CONNVER" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNVER"/>
   <ITEM CMPNAME="TD_CONTNAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONTNAME"/>
   <ITEM CMPNAME="TD_CONTVER" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONTVER"/>
   <ITEM CMPNAME="TD_DEVCLASS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DEVCLASS"/>
   <ITEM CMPNAME="TD_DOC_ID" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DOC_ID"/>
   <ITEM CMPNAME="TD_EXISTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_EXISTS"/>
   <ITEM CMPNAME="TD_FILENAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_FILENAME"/>
   <ITEM CMPNAME="TD_FILETYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_FILETYPE"/>
   <ITEM CMPNAME="TD_LANG" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_LANG"/>
   <ITEM CMPNAME="TD_LIGHT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_LIGHT"/>
   <ITEM CMPNAME="TD_OBJ_TYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_OBJ_TYPE"/>
   <ITEM CMPNAME="TD_ORDERKIND" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ORDERKIND"/>
   <ITEM CMPNAME="TD_PROGNAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_PROGNAME"/>
   <ITEM CMPNAME="TD_SUBSTITUTIONKIND" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_SUBSTITUTIONKIND"/>
   <ITEM CMPNAME="TD_TRANSPORT_REQUEST" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TRANSPORT_REQUEST"/>
   <ITEM CMPNAME="TD_TXTP_ID" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_ID"/>
   <ITEM CMPNAME="TD_TXTP_KIND" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_KIND"/>
   <ITEM CMPNAME="TD_TXTP_LEN" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_LEN"/>
   <ITEM CMPNAME="TD_TXTP_TEXT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_TEXT"/>
   <ITEM CMPNAME="TD_TYPEORDER" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TYPEORDER"/>
   <ITEM CMPNAME="TD_TYPE_AS_TEXT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TYPE_AS_TEXT"/>
   <ITEM CMPNAME="TEXTPOOL_KINDS" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TEXTPOOL_KINDS"/>
   <ITEM CMPNAME="TO_XML" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TO_XML"/>
   <ITEM CMPNAME="TR_DLVUNIT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_DLVUNIT"/>
   <ITEM CMPNAME="TR_DOCID" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_DOCID"/>
   <ITEM CMPNAME="TR_PACKAGES" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_PACKAGES"/>
   <ITEM CMPNAME="TR_TR" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_TR"/>
   <ITEM CMPNAME="TS_BASE_ATTRIBUTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_BASE_ATTRIBUTS"/>
   <ITEM CMPNAME="TS_COMPKEY" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPKEY"/>
   <ITEM CMPNAME="TS_COMPONENT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPONENT"/>
   <ITEM CMPNAME="TS_CONNDATA" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONNDATA"/>
   <ITEM CMPNAME="TS_CONN_CLASS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONN_CLASS"/>
   <ITEM CMPNAME="TS_CONN_DEF" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONN_DEF"/>
   <ITEM CMPNAME="TS_CONTDATA" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONTDATA"/>
   <ITEM CMPNAME="TS_DIRECTORY" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_DIRECTORY"/>
   <ITEM CMPNAME="TS_DOC" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_DOC"/>
   <ITEM CMPNAME="TS_HEAD" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_HEAD"/>
   <ITEM CMPNAME="TS_LANG" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_LANG"/>
   <ITEM CMPNAME="TS_TXTP_TEXT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TXTP_TEXT"/>
   <ITEM CMPNAME="TS_TXTP_TEXTPOOL" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TXTP_TEXTPOOL"/>
   <ITEM CMPNAME="TS_TYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TYPE"/>
   <ITEM CMPNAME="TT_ABAPRAWSOURCE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_ABAPRAWSOURCE"/>
   <ITEM CMPNAME="TT_COMPKEYS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_COMPKEYS"/>
   <ITEM CMPNAME="TT_CONN_CLASSES" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_CONN_CLASSES"/>
   <ITEM CMPNAME="TT_DOCS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_DOCS"/>
   <ITEM CMPNAME="TT_RAWTEXT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_RAWTEXT"/>
   <ITEM CMPNAME="TT_TXTP_TEXTPOOLS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTPOOLS"/>
   <ITEM CMPNAME="TT_TXTP_TEXTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTS"/>
   <ITEM CMPNAME="TT_TYPES" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TYPES"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" EXPOSURE="2" STATE="1" ATTDECLTYP="2" ATTVALUE="&apos;CONTAINER&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANG="E" TEXT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="FILE" EXPOSURE="2" STATE="1" TYPTYPE="1" TYPE="TO_FILE">
    <TEXTS>
     <ITEM LANG="E" TEXT="File Manager"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="LOG" EXPOSURE="2" STATE="1" ATTRDONLY="X" TYPTYPE="1" TYPE="TO_LOG">
    <TEXTS>
     <ITEM LANG="E" TEXT="Message Collector: Standard Implementation"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_CURSOR" STATE="1" TYPTYPE="3" TYPE="IF_IXML_NODE">
    <TEXTS>
     <ITEM LANG="E" TEXT="Node of parent search in _is_subcomponent( )"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_CX" STATE="1" ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_ROOT_EXCEPTION">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_MYCX" STATE="1" ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_EXCEPTION">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink Exception for Component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TN_CONTAINER_ROOT" EXPOSURE="2" STATE="1" ATTDECLTYP="2" ATTVALUE="&apos;CONTAINER&apos;" TYPTYPE="1" TYPE="STRING">
    <TEXTS>
     <ITEM LANG="E" TEXT="Container XML root node name"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="XMLDATA" EXPOSURE="1" STATE="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT">
    <TEXTS>
     <ITEM LANG="E" TEXT="XML data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="XMLENGINE" EXPOSURE="1" STATE="1" ATTDECLTYP="1" TYPTYPE="3" TYPE="IF_IXML">
    <TEXTS>
     <ITEM LANG="E" TEXT="XML Engine"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_COMPLIST" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TO_LIST">
    <TEXTS>
     <ITEM LANG="E" TEXT="Component list"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_NODEINDEX" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TT_NODEINDEX">
    <TEXTS>
     <ITEM LANG="E" TEXT="XML Node component index table"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_OPTIONS" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TO_OPTIONS">
    <TEXTS>
     <ITEM LANG="E" TEXT="Container&apos;s Options"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <INTERFACES>
   <ITEM REFCLSNAME="ZAPLINK_DATATYPES" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  </INTERFACES>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE zaplink_macros.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
  xmlengine = cl_ixml=&gt;create( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2">
    <TEXTS>
     <ITEM LANG="E" TEXT="CONSTRUCTOR"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="O_FILE" CMPTYPE="1" MTDTYPE="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_FILE">
      <TEXTS>
       <ITEM LANG="E" TEXT="File Manager"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  CREATE OBJECT _complist.
  CREATE OBJECT _options.
  mac_create_log log ballog_subobject space.
  log-&gt;msgid = &apos;ZAPLINK&apos;.
  xmldata = xmlengine-&gt;create_document( ).
  file = o_file.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_CONTENT" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Get Content list"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  TRY.
      result = _complist-&gt;clone( ).
    CATCH zcx_zaplink INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_OPTIONS" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Options : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TO_OPTIONS"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
result = _options.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_ROOT" EXPOSURE="1" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Get container root element"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="ROOT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="3" TYPE="IF_IXML_NODE"/>
    </PARAMETERS>
    <SOURCE>`
  root = xmldata-&gt;get_first_child( ).
  check root is bound.
*  IF root-&gt;get_name( ) &lt;&gt; tn_container_root.
*    CLEAR root.
*  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="LOAD_FROM_FILE" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Import XML container from File"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="O_FILE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_FILE" PAROPTIONL="X">
      <TEXTS>
       <ITEM LANG="E" TEXT="File Manager"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _xml   TYPE string.
  DATA _file  TYPE to_file.

  IF o_file IS BOUND.
    _file = o_file.
  ELSE.
    _file = file.
  ENDIF.

  TRY.
      _file-&gt;load( ).
      _xml = _file-&gt;get_filecontent( ).
    CATCH ZCX_ZL_FILE.
      RETURN.
  ENDTRY.
  file = _file.

  load_from_xml( _xml ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="LOAD_FROM_XML" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Import XML container from File"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="XML" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING">
      <TEXTS>
       <ITEM LANG="E" TEXT="XML data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _streamfactory   TYPE REF TO if_ixml_stream_factory.
  DATA _stream          TYPE REF TO if_ixml_istream.
  DATA _parser          TYPE REF TO if_ixml_parser.
  DATA _doc             TYPE REF TO	if_ixml_document.

  _streamfactory = xmlengine-&gt;create_stream_factory( ).
  _doc = xmlengine-&gt;create_document( ).
  _stream = _streamfactory-&gt;create_istream_string( xml ).
  _parser = xmlengine-&gt;create_parser(  stream_factory = _streamfactory
                                       istream        = _stream
                                       document       = _doc ).
  _parser-&gt;parse( ).
  IF _doc IS BOUND.
    xmldata = _doc.
  ENDIF.

  _update_componentslist( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_OPTIONS" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Options : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_OPTIONS"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
check data &lt;&gt; _options.
  _options = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="TRANSPORT_TO_SAP" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Transport container&apos;s compnents to SAP Components"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJECT_LIST" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_connector  TYPE to_connector.
  DATA o_list_comp  TYPE to_component.
  DATA o_comp       TYPE to_component.
  DATA o_comp_n     TYPE to_component.
  DATA o_comp_s     TYPE to_component.
  DATA o_listsub    TYPE to_list.
  DATA o_subcomp    TYPE to_component.
*  DATA object_off        TYPE to_raw.
  DATA _components  TYPE to_list.
  DATA _xml_comp    TYPE REF TO if_ixml_document.
  DATA _clone       TYPE REF TO	if_ixml_node.
  DATA _cx_connector TYPE REF TO ZCX_ZL_CONNECTOR.
  DATA o_raw        TYPE to_raw_base.
  DATA _directory   TYPE ts_directory.
  DATA o_log        TYPE to_log.
* Issue 47 : handling dependencies  --&gt; Start
  DATA o_todo       TYPE to_list.
  DATA o_remain     TYPE to_list.
  DATA o_skiplist   TYPE to_list.
  DATA o_deplist    TYPE to_list.
* Issue 47 : handling dependencies  &lt;-- END
* Issue 124 : Check dependencies --&gt; Start
  DATA o_chk_exist  TYPE to_component.
  DATA d_chk_name   TYPE td_compname.
  DATA d_chk_type   TYPE td_comptype.
  DATA f_dep_ok     TYPE abap_bool.
* Issue 124 : Check dependencies &lt;-- End
  DATA d_name       TYPE td_compname.
  DATA d_type       TYPE td_comptype.
  DATA f_ok         TYPE abap_bool.
  DATA d_msgno      TYPE symsgno.
  DATA d_msgty      TYPE symsgty.

  CHECK object_list IS BOUND.
  IF zaplink_tools=&gt;import_allowed &lt;&gt; abap_true.
    RAISE EXCEPTION TYPE ZCX_ZL_IMPORT_NOT_ALLOWED.
  ENDIF.
  TRY.
      object_list-&gt;keep_commun_list( _complist ).
* Issue 47 : handling dependencies  --&gt; Start
      o_todo = object_list-&gt;clone( ).
      DO.
        CREATE OBJECT o_skiplist.
        o_remain = o_todo-&gt;clone( ).
* Issue 47 : handling dependencies  &lt;-- END
        o_todo-&gt;display_progress = abap_true.
        o_todo-&gt;order_kind = zaplink_list=&gt;order_kinds-install.
        o_todo-&gt;init_sel_iter( ).
        o_comp_n = o_todo-&gt;get_next( ).
        WHILE o_comp_n IS BOUND.
          o_comp = o_comp_n.    o_comp_n = o_todo-&gt;get_next( ).    &quot; to allow continue
          o_comp_s = _complist-&gt;search( o_comp ).
          ASSERT ID zaplink CONDITION o_comp_s IS BOUND.
          o_list_comp = object_list-&gt;search( o_comp ).
          ASSERT ID zaplink CONDITION o_list_comp IS BOUND.
          o_connector = o_comp_s-&gt;connector( ).
          o_connector-&gt;options = _options.
*         o_log = o_comp_s-&gt;get_msg_coll( ).
          o_log = o_list_comp-&gt;get_msg_coll( ).
          IF NOT o_log IS BOUND.
            CREATE OBJECT o_log.
*            o_comp_s
            o_list_comp-&gt;set_msg_coll( o_log ).
            CALL METHOD o_log-&gt;init
              EXPORTING
                id_object      = ballog_object
                id_subobject   = ballog_subobject
*               id_extnumber   =
                auto_upd_custo = abap_true
*               id_activity    = ACT_CREATE
              EXCEPTIONS
                error          = 1
                OTHERS         = 2.
            IF sy-subrc &lt;&gt; 0.
              log-&gt;add_symsg( ).
            ENDIF.
          ENDIF.

          d_name = o_comp_s-&gt;get_name( ).     d_type = o_comp_s-&gt;get_type( ).
* Processing (&amp;1) &amp;2
          SET EXTENDED CHECK OFF.
          IF 1 = 2.   MESSAGE i000 WITH space space.    ENDIF.
          SET EXTENDED CHECK ON.
          CALL METHOD log-&gt;add_info
            EXPORTING
*             id_detlevel  =
*             id_probclass =
*             id_msgid     =
              id_msgno     = &apos;000&apos;
*             id_msgv3     =
*             id_msgv4     =
              id_msgv1     = d_type
              id_msgv2     = d_name.

          _xml_comp = xmlengine-&gt;create_document( ).
          _clone = _find_component_node( o_comp_s ).
          _clone = _clone-&gt;clone( ).
          _xml_comp-&gt;if_ixml_node~append_child( _clone ).

          TRY.
* Make directory entry
              o_raw = zaplink_connectors=&gt;node_2_raw( _clone ).
* Issue 47 : handling dependencies  --&gt; Start
              CREATE OBJECT o_deplist.
              o_deplist-&gt;add_keys( o_raw-&gt;dependencies ).
              IF o_remain-&gt;has_any( o_deplist ) = abap_true.
                o_skiplist-&gt;add( o_comp ). &quot; because dependcies will be processed first
                CONTINUE.
              ENDIF.
* Issue 47 : handling dependencies  &lt;-- END
* Issue 124 : Check dependencies --&gt; Start
              o_deplist-&gt;display_progress = abap_false.
              o_deplist-&gt;init_iter( ).
              o_chk_exist = o_deplist-&gt;get_next( ).
              f_dep_ok = abap_true.     &quot; by default OK : Hot fix
              WHILE o_chk_exist IS BOUND.
                f_dep_ok = o_chk_exist-&gt;do_exists( ).
                IF f_dep_ok = abap_false.
                  d_chk_name = o_chk_exist-&gt;get_name( ).     d_chk_type = o_chk_exist-&gt;get_type( ).
* Failed to import (&amp;1) &amp;2 : Dependencie (&amp;3) &amp;4 is missing
                  SET EXTENDED CHECK OFF.
                  IF 1 = 2.   MESSAGE i008 WITH space space.    ENDIF.
                  SET EXTENDED CHECK ON.
                  CALL METHOD o_log-&gt;add
                    EXPORTING
*                     is_message =
                      id_msgty   = &apos;E&apos;
                      id_msgid   = &apos;ZAPLINK&apos;
                      id_msgno   = 008
                      id_msgv1   = d_type
                      id_msgv2   = d_name
                      id_msgv3   = d_chk_type
                      id_msgv4   = d_chk_name.
                  EXIT.
                ENDIF.
                o_chk_exist = o_deplist-&gt;get_next( ).
              ENDWHILE.
              IF f_dep_ok = abap_false.
                CONTINUE.                     &quot; Skip object
              ENDIF.
* Issue 124 : Check dependencies &lt;-- End
              TRY.      &quot; Issue 99 : Error while setting directory mustn&apos;t stop importing process
                  _directory = _options-&gt;directory-&gt;set_directory( o_raw ).
                CATCH zcx_zaplink INTO o_cx.
                  o_log-&gt;add_exception( o_cx ).
              ENDTRY.
              o_log-&gt;add_from_instance( _options-&gt;directory-&gt;application_log ).
* Sub components
              o_listsub = o_comp_s-&gt;get_subcomponents( ).
              IF o_listsub IS BOUND.
                o_listsub-&gt;display_progress = abap_false.
                o_listsub-&gt;init_iter( ).
                o_subcomp = o_listsub-&gt;get_next( ).
                WHILE o_subcomp IS BOUND.
                  _clone = _find_component_node( component = o_comp_s
                                                  sub_comp = o_subcomp ).
                  o_raw = zaplink_connectors=&gt;node_2_raw( _clone ).
                  TRY.      &quot; Issue 99 : Error while setting directory mustn&apos;t stop importing process
                      _options-&gt;directory-&gt;set_directory( o_raw ).
                    CATCH zcx_zaplink INTO o_cx.
                      o_log-&gt;add_exception( o_cx ).
                  ENDTRY.
                  o_log-&gt;add_from_instance( _options-&gt;directory-&gt;application_log ).
                  o_subcomp = o_listsub-&gt;get_next( ).
                ENDWHILE.
              ENDIF.

              _components = o_connector-&gt;import_to_sap( _xml_comp ).
              IF _components IS NOT BOUND.   CREATE OBJECT _components.   ELSE.   f_ok = abap_true. ENDIF.
              o_list_comp-&gt;set_subcomponents( _components ).
              o_list_comp-&gt;set_msg_coll( o_connector-&gt;application_log ).
              IF o_connector-&gt;application_log IS BOUND.   IF o_connector-&gt;application_log-&gt;has_messages_of_msgt(&apos;W&apos;) = abap_true.      f_ok = abap_false. log-&gt;add_from_instance( o_connector-&gt;application_log ).   ENDIF.   ENDIF.
              IF _components-&gt;search( o_comp ) IS BOUND.    _components-&gt;remove( o_comp ).    ELSE.     f_ok = abap_false.     ENDIF.
              o_remain-&gt;remove( o_comp ).                   &quot; Issue 47
              IF f_ok = abap_true.
                d_msgty = &apos;S&apos;.    d_msgno = 004.
* Succesfully imported (&amp;1) &amp;2
                SET EXTENDED CHECK OFF.
                IF 1 = 2.   MESSAGE i004 WITH space space.    ENDIF.
                SET EXTENDED CHECK ON.
              ELSE.
                d_msgty = &apos;E&apos;.    d_msgno = 005.
* Failed to import (&amp;1) &amp;2
                SET EXTENDED CHECK OFF.
                IF 1 = 2.   MESSAGE i005 WITH space space.    ENDIF.
                SET EXTENDED CHECK ON.
              ENDIF.
              CALL METHOD log-&gt;add
                EXPORTING
*                 is_message =
                  id_msgty   = d_msgty
                  id_msgid   = &apos;ZAPLINK&apos;
                  id_msgno   = d_msgno
*                 id_msgv3   =
*                 id_msgv4   =
                  id_msgv1   = d_type
                  id_msgv2   = d_name.
            CATCH ZCX_ZL_CONNECTOR INTO _cx_connector.
              o_list_comp-&gt;set_exception( _cx_connector ).
              CALL METHOD log-&gt;add_exception
                EXPORTING
                  exception = _cx_connector.
              mac_add_log o_connector-&gt;application_log o_log &apos;E&apos;.   &quot; append application log if error is present
          ENDTRY.

        ENDWHILE.
* Issue 47 : handling dependencies  --&gt; Start
        IF o_skiplist-&gt;is_empty( ) = abap_true.   EXIT.   ENDIF.
        IF o_todo-&gt;get_count( ) = o_skiplist-&gt;get_count( ).
* error : circular dependencies
          RAISE EXCEPTION TYPE ZCX_ZL_CONTAINER
            EXPORTING
              textid = ZCX_ZL_CONTAINER=&gt;circular_dependencies.
        ENDIF.
        o_todo = o_skiplist-&gt;clone( ).    o_todo-&gt;select_all( ).
      ENDDO.
* Issue 47 : handling dependencies  &lt;-- END
    CATCH zcx_zaplink INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="UNINSTALL_FROM_SAP" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Transport container&apos;s compnents to SAP Components"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJECT_LIST" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_connector  TYPE to_connector.
  DATA o_comp       TYPE to_component.
  DATA o_scomp      TYPE to_component.
*  DATA o_ncomp      TYPE to_component.
  DATA object       TYPE to_raw.
  DATA _done        TYPE abap_bool.
  DATA s_key        TYPE ts_component.
*  DATA _cx_connector TYPE REF TO ZCX_ZL_CONNECTOR.
  DATA o_log        TYPE to_log.
  DATA s_lock       TYPE tlock_int.                         &quot; Issue 101
  DATA d_flag       TYPE trpari-s_lockflag.                 &quot; Issue 101
  DATA o_raw        TYPE to_raw_base.                       &quot; Issue 101
  DATA _directory   TYPE ts_directory.                      &quot; Issue 101
  DATA o_list       TYPE to_list.                           &quot; Issue 104

  CHECK object_list IS BOUND.
  TRY.
*  object_list-&gt;keep_commun_list( _complist ).
      object_list-&gt;display_progress = abap_true.
      object_list-&gt;order_kind = zaplink_list=&gt;order_kinds-uninstall.

      object_list-&gt;init_sel_iter( ).
      o_comp = object_list-&gt;get_next( ).
      WHILE o_comp IS BOUND.
        o_scomp = _complist-&gt;search( o_comp ).
        IF o_scomp IS BOUND.
* Delete sub object : Issue 104
          o_list = o_scomp-&gt;get_subcomponents( ).
          IF o_list IS BOUND.
            o_list-&gt;display_progress = abap_false.
            o_list-&gt;order_kind = zaplink_list=&gt;order_kinds-uninstall.
            o_list-&gt;select_all( ).
            o_list-&gt;init_sel_iter( ).
            o_scomp = o_list-&gt;get_next( ).
            WHILE o_scomp IS BOUND.
              _uninstall_component( o_scomp ).
              o_log = o_scomp-&gt;get_msg_coll( ).
              log-&gt;add_from_instance( io_msglist        = o_log
                                      if_add_as_subnode = abap_true ).
              o_scomp = o_list-&gt;get_next( ).
            ENDWHILE.
          ENDIF.
        ENDIF.
* Delete sub object : end
        _uninstall_component( o_comp ).
        o_log = o_comp-&gt;get_msg_coll( ).
        log-&gt;add_from_instance( io_msglist        = o_log
                                if_add_as_subnode = abap_true ).
        o_comp = object_list-&gt;get_next( ).
      ENDWHILE.
    CATCH zcx_zaplink INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_ADD_TO_COMPONENTSLIST" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Add a node to composent&apos;s list"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NODE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_NODE">
      <TEXTS>
       <ITEM LANG="E" TEXT="Node to insert"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_raw       TYPE to_raw_base.
  DATA o_comp      TYPE to_component.
  DATA o_comp_p    TYPE to_component.
*  DATA o_cx_comp   TYPE REF TO ZCX_ZAPLINK_component.
  DATA o_conn      TYPE to_connector.
  DATA o_list      TYPE to_list.
  DATA _index      LIKE LINE OF _nodeindex.
  DATA str         TYPE string.
  DATA d_sub       TYPE abap_bool.
*  DATA d_uuid_init TYPE td_connuuid.

  CHECK node IS BOUND.
  str = node-&gt;get_name( ).
  CHECK str = comp_nodename. &quot; Security
  _index-node = node.          &quot; save current node
  d_sub = _is_subcomponent( _index-node ).      &quot; Issue 102

  TRY.
      o_raw = zaplink_connectors=&gt;node_2_raw( _index-node ).
      IF o_raw-&gt;name IS INITIAL.
*        CALL METHOD log-&gt;add_error
        EXIT.
      ENDIF.
      TRY.
          o_comp = o_raw-&gt;get_component( ).
          o_conn = o_comp-&gt;connector( ).
        CATCH ZCX_ZL_CONTAINER INTO o_mycx.
          log-&gt;add_exception( exception = o_mycx ).
          o_comp = o_raw-&gt;get_component( abap_true ).
      ENDTRY.
*      TRY.
*          d_uuid_init = o_raw-&gt;connector.
*          o_comp-&gt;set_connuuid( d_uuid_init ).
*          o_conn = o_comp-&gt;connector( ).
*        CATCH ZCX_ZAPLINK_component INTO o_cx_comp.
**        CALL METHOD log-&gt;add_warning
*          CLEAR o_raw-&gt;connector.
*          o_comp-&gt;set_connuuid( d_uuid_init ).
*          o_conn = o_comp-&gt;connector( ).
*      ENDTRY.

      IF NOT o_conn IS BOUND.
*        CALL METHOD log-&gt;add_warning
      ELSE.
        IF o_conn-&gt;is_supported_version( o_raw-&gt;version ) = abap_false.
*        CALL METHOD log-&gt;add_warning
        ENDIF.
      ENDIF.

      IF d_sub = abap_false.      &quot; Issue 102 : Root comp
        o_comp_p = _complist-&gt;search( o_comp ).
        IF o_comp_p IS BOUND.   o_comp = o_comp_p.    ELSE.   _complist-&gt;add( o_comp ).     ENDIF.
      ELSE.
* Not working : node are the same but it&apos;s a new object. :(
*      READ TABLE _nodeindex INTO _index
*           WITH KEY node = o_cursor.
        o_raw = zaplink_connectors=&gt;node_2_raw( o_cursor ).   &quot; Read Parent
        o_comp_p = o_raw-&gt;get_component( ).
        o_comp_p = _complist-&gt;search( o_comp_p ).
        o_list = o_comp_p-&gt;get_subcomponents( ).
        IF NOT o_list IS BOUND.
          CREATE OBJECT o_list.
          o_comp_p-&gt;set_subcomponents( o_list ).
        ENDIF.
        IF NOT o_list-&gt;search( o_comp ) IS BOUND.   o_list-&gt;add( o_comp ).    ENDIF.      &quot; Issue 102
      ENDIF.

* Issue 10 : update node list
      _index-key = o_comp.
      MODIFY TABLE _nodeindex FROM _index.
      IF sy-subrc &lt;&gt; 0.   INSERT _index INTO TABLE _nodeindex.    ENDIF.

    CATCH ZCX_ZAPLINK INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_FIND_COMPONENT_NODE" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Find component node in container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT"/>
     <ITEM SCONAME="NODE" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="3" TYPE="IF_IXML_NODE">
      <TEXTS>
       <ITEM LANG="E" TEXT="IF_IXML_NODE"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="SUB_COMP" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT" PAROPTIONL="X"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_comp   TYPE to_component.
  DATA o_list   TYPE to_list.
  DATA _cx_list TYPE REF TO ZCX_ZL_LIST.
  FIELD-SYMBOLS:
    &lt;i&gt; LIKE LINE OF _nodeindex.

  TRY.
    TRY.
        o_comp = _complist-&gt;search( component ).
      CATCH ZCX_ZL_LIST INTO _cx_list.
        IF _cx_list-&gt;is_exception_text( ZCX_ZL_LIST=&gt;not_found ) = abap_true.
          EXIT.
        ELSE.
          CREATE OBJECT o_mycx
            EXPORTING
              textid   = ZCX_ZAPLINK=&gt;system_error
              previous = _cx_list.
          o_mycx-&gt;update( ).
          RAISE EXCEPTION o_mycx.
        ENDIF.
    ENDTRY.

* Issue 10 : sub comp lookup
    CHECK o_comp IS BOUND.
    o_list = o_comp-&gt;get_subcomponents( ).
    IF sub_comp IS BOUND AND o_list IS BOUND.
      o_comp = o_list-&gt;search( sub_comp ).
    ENDIF.
* Issue 10 : end

    READ TABLE _nodeindex ASSIGNING &lt;i&gt;
         WITH TABLE KEY key = o_comp.
    IF sy-subrc = 0.
      node = &lt;i&gt;-node.
    ENDIF.

*  DATA _type     TYPE td_comptype.
*  DATA _name     TYPE td_compname.
*  DATA _cx_comp  TYPE REF TO ZCX_ZAPLINK_component.
*  DATA f_type   TYPE REF TO if_ixml_node_filter.
*  DATA f_name   TYPE REF TO if_ixml_node_filter.
*  DATA o_f_node TYPE REF TO if_ixml_node_filter.
*  DATA filter   TYPE REF TO if_ixml_node_filter.
*  DATA filter_f TYPE REF TO if_ixml_node_filter.
*  DATA iterator TYPE REF TO if_ixml_node_iterator.
*  DATA _root    TYPE REF TO if_ixml_node.
*  DATA string TYPE string.
*
*  TRY.
*      _type = component-&gt;get_type( ).
*      _name = component-&gt;get_name( ).
*    CATCH ZCX_ZAPLINK_component INTO _cx_comp.
*  ENDTRY.
*
*  _root = xmldata-&gt;get_root_element( ).
*  o_f_node = xmldata-&gt;create_filter_name( name = comp_nodename ).
*  string = _type.
*  f_type = xmldata-&gt;create_filter_attribute( name = &apos;TYPE&apos;
*                                            value = string ).
*  string = _name.
*  f_name = _root-&gt;create_filter_attribute( name = &apos;NAME&apos;
*                                          value = string ).
*  filter = _root-&gt;create_filter_and( filter1 = f_type
*                                     filter2 = f_name ).
*  filter_f = _root-&gt;create_filter_and( filter1 = filter
*                                       filter2 = filter_f ).
*  iterator = _root-&gt;create_iterator_filtered( depth = 1
*                                             filter = filter ).
*  node = iterator-&gt;get_next( ).
*  check node is bound.
*  WHILE _is_subcomponent( node ) = abap_true.
*    node = iterator-&gt;get_next( ).
*    IF NOT node IS BOUND.
*      EXIT.
*    ENDIF.
*  ENDWHILE.
    mac_def_catch ZCX_ZL_CONTAINER.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_IS_SUBCOMPONENT" EXPOSURE="1" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Is node a sub-component"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NODE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_NODE">
      <TEXTS>
       <ITEM LANG="E" TEXT="XML Node"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="ABAP_BOOL">
      <TEXTS>
       <ITEM LANG="E" TEXT="(&apos;X&apos;) node is a sub component (&apos; &apos;) node is root component"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  data _cursor type ref to IF_IXML_NODE.

  result = abap_false.
  clear o_cursor.
  _cursor = node-&gt;get_parent( ).
  WHILE _cursor IS BOUND.
    IF _cursor-&gt;get_name( ) = comp_nodename.
      result = abap_true.
      o_cursor = _cursor.
*      EXIT.  new the root node
    ENDIF.
    _cursor = _cursor-&gt;get_parent( ).
  ENDWHILE.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_SEARCH_COMPONENTS" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Search composents from node"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NODE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_NODE">
      <TEXTS>
       <ITEM LANG="E" TEXT="IF_IXML_NODE"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_iterator  TYPE REF TO if_ixml_node_iterator.
  DATA o_filt_name TYPE REF TO if_ixml_node_filter.
  DATA o_node      TYPE REF TO  if_ixml_node.
  DATA str         TYPE string.

  CHECK node IS BOUND.
  str = node-&gt;get_name( ).
  CHECK str &lt;&gt; &apos;#document&apos;.
* Issue 102 : Search also for sub component
*  IF str = comp_nodename.
*    TRY.
*        _add_to_componentslist( node ).
*      CATCH ZCX_ZAPLINK INTO o_cx.
*        mac_cascade_raise o_mycx o_cx.
*    ENDTRY.
*  ELSE.
* Search parent &amp; childrens
    o_filt_name = node-&gt;create_filter_name( name = comp_nodename ).
    o_iterator = node-&gt;create_iterator_filtered( filter = o_filt_name ).
    o_node = o_iterator-&gt;get_next( ).
    WHILE o_node IS BOUND.
      TRY.
          _add_to_componentslist( o_node ).
        CATCH ZCX_ZAPLINK INTO o_cx.
          mac_cascade_raise o_mycx o_cx.
      ENDTRY.
      o_node = o_iterator-&gt;get_next( ).

    ENDWHILE.
*  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_UNINSTALL_COMPONENT" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Transport container&apos;s compnents to SAP Components"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANG="E" TEXT="Component list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_connector  TYPE to_connector.
  DATA o_comp       TYPE to_component.
  DATA object       TYPE to_raw.
  DATA _done        TYPE abap_bool.
  DATA s_key        TYPE ts_component.
  DATA _cx_connector TYPE REF TO ZCX_ZL_CONNECTOR.
  DATA o_log        TYPE to_log.
  DATA s_lock       TYPE tlock_int.                         &quot; Issue 101
  DATA d_flag       TYPE trpari-s_lockflag.                 &quot; Issue 101
  DATA o_raw        TYPE to_raw_base.                       &quot; Issue 101
  DATA _directory   TYPE ts_directory.                      &quot; Issue 101
*  DATA o_list       TYPE to_list.                           &quot; Issue 104

  CHECK component IS BOUND.
  o_comp = component.
  o_connector = o_comp-&gt;connector( ).
*  o_list = o_comp-&gt;get_subcomponents( ).
*  IF o_list IS BOUND.
*    uninstall_from_sap( o_list ).
*  ENDIF.

  o_log = o_comp-&gt;get_msg_coll( ).
  IF NOT o_log IS BOUND.
    CREATE OBJECT o_log.
    o_comp-&gt;set_msg_coll( o_log ).
    CALL METHOD o_log-&gt;init
      EXPORTING
        id_object      = ballog_object
        id_subobject   = ballog_subobject
*          id_extnumber   =
        auto_upd_custo = abap_true
*          id_activity    = ACT_CREATE
      EXCEPTIONS
        error          = 1
        OTHERS         = 2.
    IF sy-subrc &lt;&gt; 0.
      log-&gt;add_symsg( ).
    ENDIF.
  ENDIF.

  TRY.
      s_key = o_comp-&gt;get_key( ).
* Processing (&amp;1) &amp;2
      IF 1 = 2.   MESSAGE i000 WITH space space.    ENDIF.
      CALL METHOD log-&gt;add_info
        EXPORTING
*              id_detlevel  =
*              id_probclass =
*              id_msgid     =
          id_msgno     = &apos;000&apos;
*              id_msgv3     =
*              id_msgv4     =
          id_msgv1     = s_key-type
          id_msgv2     = s_key-name.

      CALL FUNCTION &apos;TRINT_CHECK_LOCKS&apos;
        EXPORTING
          wi_lock_key = s_lock
        IMPORTING
          we_lockflag = d_flag
        EXCEPTIONS
          empty_key   = 1
          OTHERS      = 2.
      IF sy-subrc = 0 AND d_flag IS INITIAL.
        CREATE OBJECT o_raw.
        o_raw-&gt;set_component( o_comp ).
        _directory = _options-&gt;directory-&gt;set_directory( o_raw ).
      ENDIF.

      _done = o_connector-&gt;delete_from_sap( o_comp ).
      IF _done = abap_true.
* Succesfully deleted &amp;1 &amp;2
        SET EXTENDED CHECK OFF.
        IF 1 = 2. MESSAGE s006 WITH space space. ENDIF.
        SET EXTENDED CHECK ON.
        CALL METHOD log-&gt;add_success
          EXPORTING
*                  id_msgid     = &apos;ZAPLINK&apos;
            id_msgno     = &apos;006&apos;
            id_msgv1     = s_key-type
            id_msgv2     = s_key-name
*                  id_msgv3     =
*                  id_msgv4     =
           .
      ELSE.
* Failed to delete &amp;1 &amp;2
        SET EXTENDED CHECK OFF.
        IF 1 = 2. MESSAGE e007 WITH space space. ENDIF.
        SET EXTENDED CHECK ON.
        CALL METHOD log-&gt;add_error
          EXPORTING
*                  id_msgid     = &apos;ZAPLINK&apos;
            id_msgno     = &apos;007&apos;
            id_msgv1     = s_key-type
            id_msgv2     = s_key-name
**              id_msgv3     =
**              id_msgv4     =
            .
      ENDIF.
      mac_add_log o_connector-&gt;application_log o_log &apos;W&apos;.
    CATCH ZCX_ZL_CONNECTOR INTO _cx_connector.
      o_log-&gt;add_exception( exception = _cx_connector ).
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_UPDATE_COMPONENTSLIST" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Update composents list"/>
    </TEXTS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZCX_ZL_CONTAINER" LANGU="E"/>
    </EXCEPTIONS>
    <SOURCE>`
*  CALL METHOD SUPER-&gt;_UPDATE_COMPONENTSLIST.
  DATA o_iterator  TYPE REF TO if_ixml_node_iterator.
  DATA o_node      TYPE REF TO if_ixml_node.
*  DATA str         TYPE string.

*&lt;X&gt;
*&lt;ZL_OBJECT CONNECTOR=&quot;29AD0A4B07A5A05AE1000000AC120173&quot; NAME=&quot;ZAPLINK&quot; TYPE=&quot;DEVC&quot; VERSION=&quot;1.0&quot;&gt;
* &lt;DIRECTORY SRCSYSTEM=&quot;OD4&quot; AUTHOR=&quot;TBENSIAL&quot; MASTERLANG=&quot;E&quot;/&gt;
* &lt;RAW&gt;
*  &lt;DATA DEVCLASS=&quot;ZAPLINK&quot; /&gt;
* &lt;/RAW&gt;
*&lt;/ZL_OBJECT&gt;
*&lt;/X&gt;
*&lt;ZL_OBJECT CONNECTOR=&quot;29AD0A4B07A5A05AE1000000AC120173&quot; NAME=&quot;ZAPLINK-CONNECTORS&quot; TYPE=&quot;DEVC&quot; VERSION=&quot;1.0&quot;&gt;
* &lt;DIRECTORY SRCSYSTEM=&quot;OD4&quot; AUTHOR=&quot;TBENSIAL&quot; MASTERLANG=&quot;E&quot;/&gt;
* &lt;RAW&gt;
*  &lt;DATA DEVCLASS=&quot;ZAPLINK-CONNECTORS&quot;/&gt;
* &lt;/RAW&gt;
*&lt;/ZL_OBJECT&gt;
* Nodes are only :
*#document
*X
*ZL_OBJECT
*DIRECTORY
*RAW
*DATA
*the next ZL_OBJECT his unaccessible.
*and ignored : If XML tag are not closed no problem.

  _complist-&gt;clear( ).    REFRESH _nodeindex.     &quot; Issue 102
  o_iterator = xmldata-&gt;create_iterator( depth = 1 ).   &quot; Do only root level
  o_node = o_iterator-&gt;get_next( ).
  WHILE o_node IS BOUND.
*    str = o_node-&gt;get_name( ).
    TRY.
        _search_components( o_node ).
      CATCH ZCX_ZAPLINK INTO o_cx.
        mac_cascade_raise o_mycx o_cx.
    ENDTRY.
    o_node = o_iterator-&gt;get_next( ).
  ENDWHILE.</SOURCE>
   </ITEM>
  </METHODS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" EXPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TO_COMPONENT" EXPOSURE="2" STATE="1" EDITORDER="7 " TYPTYPE="3" TYPE="ZAPLINK_COMPONENT">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPLink Component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_CONNECTOR" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_CONNECTOR">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPLink Connector interface"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_EXCEPTION" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZCX_ZL_CONTAINER">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink ROOT Exception for Connectors"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_FILE" EXPOSURE="2" STATE="1" EDITORDER="8 " TYPTYPE="3" TYPE="ZAPLINK_FILE">
    <TEXTS>
     <ITEM LANG="E" TEXT="File Manager"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_LIST" EXPOSURE="2" STATE="1" EDITORDER="6 " TYPTYPE="3" TYPE="ZAPLINK_LIST">
    <TEXTS>
     <ITEM LANG="E" TEXT="Component list"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_LOG" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="3" TYPE="ZAPLINK_MESSAGE_COLLECTOR">
    <TEXTS>
     <ITEM LANG="E" TEXT="Message Collector: Standard Implementation"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_OPTIONS" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_OPTIONS">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPLink : Options"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_RAW" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="3" TYPE="ZAPLINK_RAW">
    <TEXTS>
     <ITEM LANG="E" TEXT="RAW component with data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_RAW_BASE" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_RAW_BASE">
    <TEXTS>
     <ITEM LANG="E" TEXT="Base RAW component without data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_ROOT_EXCEPTION" EXPOSURE="2" STATE="1" EDITORDER="9 " TYPTYPE="3" TYPE="ZCX_ZAPLINK">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_NODEINDEX" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="4">
    BEGIN OF ts_nodeindex,
      key   TYPE ref to zaplink_component,
      node  TYPE REF TO if_ixml_node,
    END OF ts_nodeindex
`
    <TEXTS>
     <ITEM LANG="E" TEXT="XML Node component index"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_NODEINDEX" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="4">
    tt_nodeindex type SORTED TABLE OF ts_nodeindex with UNIQUE key key
`
    <TEXTS>
     <ITEM LANG="E" TEXT="XML Node component index table"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
